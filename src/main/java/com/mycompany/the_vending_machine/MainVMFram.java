/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.the_vending_machine;

import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.nio.file.*;
import java.text.*;
import javax.swing.*;
import java.util.*;
import java.util.logging.*;
import javax.swing.text.*;

/**
 *
 * @author premsharaan
 */
public class MainVMFram extends javax.swing.JFrame {

    //This variables will be used for later usage
    private String projectDir, purchaseID;   //The projectDir variable will be used for setting project directory and the purchaseID is for item purchase
    private int newPurchaseID;   //This variable is for assigning the new incremented purchase ID
    private final String prefixID = "PID";  //This variable is for prefix of the purchase ID
    final DecimalFormat deciFormat = new DecimalFormat("00000");  //This sets the purchase ID format

    int totalprice; //This variable is to get the total price
    double changeMoney, enteredMoney, btnvalue;  // This variable is for the calculations
    final DecimalFormat cashFormat = new DecimalFormat("0.00"); //This is to set the cash format

    /**
     * Creates new form MainVMFram
     */
    //creating a default constructor
    public MainVMFram() {
        initComponents();
        init();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        jPanel5 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        lblTitle = new javax.swing.JLabel();
        lblDate = new javax.swing.JLabel();
        lblTime = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtTimeDisplay = new javax.swing.JTextPane();
        jScrollPane5 = new javax.swing.JScrollPane();
        txtDateDisplay = new javax.swing.JTextPane();
        btnVerify = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        lblSlot2 = new javax.swing.JLabel();
        lblSlot3 = new javax.swing.JLabel();
        lblSlot5 = new javax.swing.JLabel();
        lblSlot4 = new javax.swing.JLabel();
        lblSlot6 = new javax.swing.JLabel();
        lblSlot7 = new javax.swing.JLabel();
        lblSlot10 = new javax.swing.JLabel();
        lblSlot1 = new javax.swing.JLabel();
        lblSlot9 = new javax.swing.JLabel();
        btnSlot1 = new javax.swing.JButton();
        btnSlot3 = new javax.swing.JButton();
        btnSlot2 = new javax.swing.JButton();
        lbl1 = new javax.swing.JLabel();
        lbl2 = new javax.swing.JLabel();
        lbl3 = new javax.swing.JLabel();
        lbl4 = new javax.swing.JLabel();
        lbl5 = new javax.swing.JLabel();
        lbl6 = new javax.swing.JLabel();
        lbl7 = new javax.swing.JLabel();
        lbl8 = new javax.swing.JLabel();
        lbl9 = new javax.swing.JLabel();
        lbl10 = new javax.swing.JLabel();
        lblItem1 = new javax.swing.JLabel();
        lblItem2 = new javax.swing.JLabel();
        lblItem4 = new javax.swing.JLabel();
        lblItem3 = new javax.swing.JLabel();
        lblItem5 = new javax.swing.JLabel();
        lblItem6 = new javax.swing.JLabel();
        btnSlot4 = new javax.swing.JButton();
        btnSlot5 = new javax.swing.JButton();
        btnSlot6 = new javax.swing.JButton();
        lblItem7 = new javax.swing.JLabel();
        btnSlot7 = new javax.swing.JButton();
        lblItem8 = new javax.swing.JLabel();
        btnSlot8 = new javax.swing.JButton();
        lblItem9 = new javax.swing.JLabel();
        btnSlot9 = new javax.swing.JButton();
        lblItem10 = new javax.swing.JLabel();
        btnSlot10 = new javax.swing.JButton();
        lblStock1 = new javax.swing.JLabel();
        lblStock2 = new javax.swing.JLabel();
        lblStock3 = new javax.swing.JLabel();
        lblStock4 = new javax.swing.JLabel();
        lblStock5 = new javax.swing.JLabel();
        lblStock6 = new javax.swing.JLabel();
        lblStock9 = new javax.swing.JLabel();
        lblStock7 = new javax.swing.JLabel();
        lblStock8 = new javax.swing.JLabel();
        lblStock10 = new javax.swing.JLabel();
        lblSlot8 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtAreaItems = new javax.swing.JTextArea();
        lblMoneyInserted = new javax.swing.JLabel();
        txtTotalPrice = new javax.swing.JTextField();
        lblSelectItems = new javax.swing.JLabel();
        lblInsertMoney = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        btn10sen = new javax.swing.JButton();
        btn20sen = new javax.swing.JButton();
        btn50sen = new javax.swing.JButton();
        btnRM10 = new javax.swing.JButton();
        btnRM1 = new javax.swing.JButton();
        txtMoneyInserted = new javax.swing.JTextField();
        lblTotalPrice = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        lblChange = new javax.swing.JLabel();
        txtChange = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        btnCancel = new javax.swing.JButton();
        lblSelectItems2 = new javax.swing.JLabel();
        btnRM5 = new javax.swing.JButton();
        btnPay = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        btnResetPayment = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("The Vending Machine");
        setMaximumSize(new java.awt.Dimension(1440, 1500));
        setPreferredSize(new java.awt.Dimension(1440, 1300));

        jScrollPane3.setMaximumSize(new java.awt.Dimension(1440, 1500));
        jScrollPane3.setPreferredSize(new java.awt.Dimension(1447, 1500));

        jPanel5.setMaximumSize(new java.awt.Dimension(1400, 1530));
        jPanel5.setMinimumSize(new java.awt.Dimension(1400, 1530));
        jPanel5.setPreferredSize(new java.awt.Dimension(1400, 1530));
        jPanel5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(249, 222, 215));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        jPanel1.setPreferredSize(new java.awt.Dimension(1440, 1400));

        lblTitle.setFont(new java.awt.Font("Lucida Grande", 1, 35)); // NOI18N
        lblTitle.setForeground(new java.awt.Color(148, 10, 10));
        lblTitle.setText("Vending Machine");

        lblDate.setBackground(new java.awt.Color(51, 51, 51));
        lblDate.setFont(new java.awt.Font("Menlo", 1, 14)); // NOI18N
        lblDate.setForeground(new java.awt.Color(51, 51, 51));
        lblDate.setText("Date :");
        lblDate.setToolTipText("");

        lblTime.setBackground(new java.awt.Color(51, 51, 51));
        lblTime.setFont(new java.awt.Font("Menlo", 1, 14)); // NOI18N
        lblTime.setForeground(new java.awt.Color(51, 51, 51));
        lblTime.setText("Time :");
        lblTime.setToolTipText("");

        txtTimeDisplay.setBackground(new java.awt.Color(238, 238, 238));
        txtTimeDisplay.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtTimeDisplay.setFont(new java.awt.Font("AppleGothic", 0, 14)); // NOI18N
        txtTimeDisplay.setForeground(new java.awt.Color(51, 51, 51));
        jScrollPane2.setViewportView(txtTimeDisplay);

        txtDateDisplay.setBackground(new java.awt.Color(238, 238, 238));
        txtDateDisplay.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        txtDateDisplay.setFont(new java.awt.Font("AppleGothic", 0, 14)); // NOI18N
        jScrollPane5.setViewportView(txtDateDisplay);

        btnVerify.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnVerify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerifyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblDate, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTime, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE)
                    .addComponent(jScrollPane5))
                .addGap(336, 336, 336)
                .addComponent(lblTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 444, Short.MAX_VALUE)
                .addComponent(btnVerify, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblDate, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(btnVerify, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addComponent(lblTitle))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblTime, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(27, Short.MAX_VALUE))
        );

        jPanel5.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(3, 6, 1410, 140));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setForeground(new java.awt.Color(0, 0, 0));
        jPanel2.setName(""); // NOI18N
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Beirut", 2, 15)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("Please Select Your Items:");
        jPanel2.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(48, 28, -1, -1));

        lblSlot2.setForeground(new java.awt.Color(0, 0, 0));
        jPanel2.add(lblSlot2, new org.netbeans.lib.awtextra.AbsoluteConstraints(344, 89, 235, 244));

        lblSlot3.setForeground(new java.awt.Color(0, 0, 0));
        jPanel2.add(lblSlot3, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 90, 210, 244));

        lblSlot5.setForeground(new java.awt.Color(0, 0, 0));
        jPanel2.add(lblSlot5, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 515, 214, 246));

        lblSlot4.setForeground(new java.awt.Color(0, 0, 0));
        jPanel2.add(lblSlot4, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 515, 209, 246));

        lblSlot6.setForeground(new java.awt.Color(0, 0, 0));
        jPanel2.add(lblSlot6, new org.netbeans.lib.awtextra.AbsoluteConstraints(667, 513, 220, 238));

        lblSlot7.setForeground(new java.awt.Color(0, 0, 0));
        jPanel2.add(lblSlot7, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 947, 162, 255));

        lblSlot10.setForeground(new java.awt.Color(0, 0, 0));
        jPanel2.add(lblSlot10, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 950, 150, 254));
        jPanel2.add(lblSlot1, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 89, 219, 244));
        jPanel2.add(lblSlot9, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 950, 160, 254));

        btnSlot1.setBackground(new java.awt.Color(204, 0, 51));
        btnSlot1.setFont(new java.awt.Font("Al Nile", 1, 14)); // NOI18N
        btnSlot1.setForeground(new java.awt.Color(255, 255, 255));
        btnSlot1.setText("Press Here");
        btnSlot1.setBorder(null);
        btnSlot1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSlot1.setIconTextGap(5);
        btnSlot1.setMargin(new java.awt.Insets(15, 14, 2, 14));
        btnSlot1.setName(""); // NOI18N
        btnSlot1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSlot1ActionPerformed(evt);
            }
        });
        jPanel2.add(btnSlot1, new org.netbeans.lib.awtextra.AbsoluteConstraints(49, 401, 159, 40));

        btnSlot3.setBackground(new java.awt.Color(204, 0, 51));
        btnSlot3.setFont(new java.awt.Font("Al Nile", 1, 14)); // NOI18N
        btnSlot3.setForeground(new java.awt.Color(255, 255, 255));
        btnSlot3.setText("Press Here");
        btnSlot3.setBorder(null);
        btnSlot3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSlot3.setIconTextGap(5);
        btnSlot3.setMargin(new java.awt.Insets(15, 14, 2, 14));
        btnSlot3.setName(""); // NOI18N
        btnSlot3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSlot3ActionPerformed(evt);
            }
        });
        jPanel2.add(btnSlot3, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 400, 159, 40));

        btnSlot2.setBackground(new java.awt.Color(204, 0, 51));
        btnSlot2.setFont(new java.awt.Font("Al Nile", 1, 14)); // NOI18N
        btnSlot2.setForeground(new java.awt.Color(255, 255, 255));
        btnSlot2.setText("Press Here");
        btnSlot2.setBorder(null);
        btnSlot2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSlot2.setIconTextGap(5);
        btnSlot2.setMargin(new java.awt.Insets(15, 14, 2, 14));
        btnSlot2.setName(""); // NOI18N
        btnSlot2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSlot2ActionPerformed(evt);
            }
        });
        jPanel2.add(btnSlot2, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 401, 159, 40));

        lbl1.setBackground(new java.awt.Color(241, 236, 234));
        lbl1.setFont(new java.awt.Font("Arial Black", 1, 13)); // NOI18N
        lbl1.setForeground(new java.awt.Color(0, 0, 51));
        lbl1.setText("  1");
        lbl1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel2.add(lbl1, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 89, 31, 30));

        lbl2.setBackground(new java.awt.Color(241, 236, 234));
        lbl2.setFont(new java.awt.Font("Arial Black", 1, 13)); // NOI18N
        lbl2.setForeground(new java.awt.Color(0, 0, 51));
        lbl2.setText("  2");
        lbl2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel2.add(lbl2, new org.netbeans.lib.awtextra.AbsoluteConstraints(585, 89, 31, 30));

        lbl3.setBackground(new java.awt.Color(241, 236, 234));
        lbl3.setFont(new java.awt.Font("Arial Black", 1, 13)); // NOI18N
        lbl3.setForeground(new java.awt.Color(0, 0, 51));
        lbl3.setText("  3");
        lbl3.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel2.add(lbl3, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 90, 31, 30));

        lbl4.setBackground(new java.awt.Color(241, 236, 234));
        lbl4.setFont(new java.awt.Font("Arial Black", 1, 13)); // NOI18N
        lbl4.setForeground(new java.awt.Color(0, 0, 51));
        lbl4.setText("  4");
        lbl4.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel2.add(lbl4, new org.netbeans.lib.awtextra.AbsoluteConstraints(231, 515, 31, 30));

        lbl5.setBackground(new java.awt.Color(241, 236, 234));
        lbl5.setFont(new java.awt.Font("Arial Black", 1, 13)); // NOI18N
        lbl5.setForeground(new java.awt.Color(0, 0, 51));
        lbl5.setText("  5");
        lbl5.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel2.add(lbl5, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 513, 31, 30));

        lbl6.setBackground(new java.awt.Color(241, 236, 234));
        lbl6.setFont(new java.awt.Font("Arial Black", 1, 13)); // NOI18N
        lbl6.setForeground(new java.awt.Color(0, 0, 51));
        lbl6.setText("  6");
        lbl6.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel2.add(lbl6, new org.netbeans.lib.awtextra.AbsoluteConstraints(893, 513, 31, 30));

        lbl7.setBackground(new java.awt.Color(241, 236, 234));
        lbl7.setFont(new java.awt.Font("Arial Black", 1, 13)); // NOI18N
        lbl7.setForeground(new java.awt.Color(0, 0, 51));
        lbl7.setText("  7");
        lbl7.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel2.add(lbl7, new org.netbeans.lib.awtextra.AbsoluteConstraints(177, 947, 31, 30));

        lbl8.setBackground(new java.awt.Color(241, 236, 234));
        lbl8.setFont(new java.awt.Font("Arial Black", 1, 13)); // NOI18N
        lbl8.setForeground(new java.awt.Color(0, 0, 51));
        lbl8.setText("  8");
        lbl8.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel2.add(lbl8, new org.netbeans.lib.awtextra.AbsoluteConstraints(425, 947, 31, 30));

        lbl9.setBackground(new java.awt.Color(241, 236, 234));
        lbl9.setFont(new java.awt.Font("Arial Black", 1, 13)); // NOI18N
        lbl9.setForeground(new java.awt.Color(0, 0, 51));
        lbl9.setText(" 10");
        lbl9.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel2.add(lbl9, new org.netbeans.lib.awtextra.AbsoluteConstraints(910, 950, 31, 30));

        lbl10.setBackground(new java.awt.Color(241, 236, 234));
        lbl10.setFont(new java.awt.Font("Arial Black", 1, 13)); // NOI18N
        lbl10.setForeground(new java.awt.Color(0, 0, 51));
        lbl10.setText("  9");
        lbl10.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel2.add(lbl10, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 947, 31, 30));

        lblItem1.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        lblItem1.setForeground(new java.awt.Color(0, 0, 0));
        jPanel2.add(lblItem1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 360, 164, 20));

        lblItem2.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        lblItem2.setForeground(new java.awt.Color(0, 0, 0));
        jPanel2.add(lblItem2, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 360, 140, 20));

        lblItem4.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        lblItem4.setForeground(new java.awt.Color(0, 0, 0));
        jPanel2.add(lblItem4, new org.netbeans.lib.awtextra.AbsoluteConstraints(79, 779, 156, 20));

        lblItem3.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        lblItem3.setForeground(new java.awt.Color(0, 0, 0));
        jPanel2.add(lblItem3, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 360, 164, 20));

        lblItem5.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        lblItem5.setForeground(new java.awt.Color(0, 0, 0));
        jPanel2.add(lblItem5, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 780, 152, 20));

        lblItem6.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        lblItem6.setForeground(new java.awt.Color(0, 0, 0));
        jPanel2.add(lblItem6, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 780, 140, 22));

        btnSlot4.setBackground(new java.awt.Color(204, 0, 51));
        btnSlot4.setFont(new java.awt.Font("Al Nile", 1, 14)); // NOI18N
        btnSlot4.setForeground(new java.awt.Color(255, 255, 255));
        btnSlot4.setText("Press Here");
        btnSlot4.setBorder(null);
        btnSlot4.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSlot4.setIconTextGap(5);
        btnSlot4.setMargin(new java.awt.Insets(15, 14, 2, 14));
        btnSlot4.setName(""); // NOI18N
        btnSlot4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSlot4ActionPerformed(evt);
            }
        });
        jPanel2.add(btnSlot4, new org.netbeans.lib.awtextra.AbsoluteConstraints(43, 820, 159, 40));

        btnSlot5.setBackground(new java.awt.Color(204, 0, 51));
        btnSlot5.setFont(new java.awt.Font("Al Nile", 1, 14)); // NOI18N
        btnSlot5.setForeground(new java.awt.Color(255, 255, 255));
        btnSlot5.setText("Press Here");
        btnSlot5.setBorder(null);
        btnSlot5.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSlot5.setIconTextGap(5);
        btnSlot5.setMargin(new java.awt.Insets(15, 14, 2, 14));
        btnSlot5.setName(""); // NOI18N
        btnSlot5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSlot5ActionPerformed(evt);
            }
        });
        jPanel2.add(btnSlot5, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 820, 159, 40));

        btnSlot6.setBackground(new java.awt.Color(204, 0, 51));
        btnSlot6.setFont(new java.awt.Font("Al Nile", 1, 14)); // NOI18N
        btnSlot6.setForeground(new java.awt.Color(255, 255, 255));
        btnSlot6.setText("Press Here");
        btnSlot6.setBorder(null);
        btnSlot6.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSlot6.setIconTextGap(5);
        btnSlot6.setMargin(new java.awt.Insets(15, 14, 2, 14));
        btnSlot6.setName(""); // NOI18N
        btnSlot6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSlot6ActionPerformed(evt);
            }
        });
        jPanel2.add(btnSlot6, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 820, 159, 40));

        lblItem7.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        lblItem7.setForeground(new java.awt.Color(0, 0, 0));
        lblItem7.setToolTipText("");
        jPanel2.add(lblItem7, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 1240, 152, 20));

        btnSlot7.setBackground(new java.awt.Color(204, 0, 51));
        btnSlot7.setFont(new java.awt.Font("Al Nile", 1, 14)); // NOI18N
        btnSlot7.setForeground(new java.awt.Color(255, 255, 255));
        btnSlot7.setText("Press Here");
        btnSlot7.setBorder(null);
        btnSlot7.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSlot7.setIconTextGap(5);
        btnSlot7.setMargin(new java.awt.Insets(15, 14, 2, 14));
        btnSlot7.setName(""); // NOI18N
        btnSlot7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSlot7ActionPerformed(evt);
            }
        });
        jPanel2.add(btnSlot7, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 1280, 159, 40));

        lblItem8.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        lblItem8.setForeground(new java.awt.Color(0, 0, 0));
        jPanel2.add(lblItem8, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 1240, 180, 20));

        btnSlot8.setBackground(new java.awt.Color(204, 0, 51));
        btnSlot8.setFont(new java.awt.Font("Al Nile", 1, 14)); // NOI18N
        btnSlot8.setForeground(new java.awt.Color(255, 255, 255));
        btnSlot8.setText("Press Here");
        btnSlot8.setBorder(null);
        btnSlot8.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSlot8.setIconTextGap(5);
        btnSlot8.setMargin(new java.awt.Insets(15, 14, 2, 14));
        btnSlot8.setName(""); // NOI18N
        btnSlot8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSlot8ActionPerformed(evt);
            }
        });
        jPanel2.add(btnSlot8, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 1280, 159, 40));

        lblItem9.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        lblItem9.setForeground(new java.awt.Color(0, 0, 0));
        jPanel2.add(lblItem9, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 1240, 178, 20));

        btnSlot9.setBackground(new java.awt.Color(204, 0, 51));
        btnSlot9.setFont(new java.awt.Font("Al Nile", 1, 14)); // NOI18N
        btnSlot9.setForeground(new java.awt.Color(255, 255, 255));
        btnSlot9.setText("Press Here");
        btnSlot9.setBorder(null);
        btnSlot9.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSlot9.setIconTextGap(5);
        btnSlot9.setMargin(new java.awt.Insets(15, 14, 2, 14));
        btnSlot9.setName(""); // NOI18N
        btnSlot9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSlot9ActionPerformed(evt);
            }
        });
        jPanel2.add(btnSlot9, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 1280, 159, 40));

        lblItem10.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        lblItem10.setForeground(new java.awt.Color(0, 0, 0));
        jPanel2.add(lblItem10, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 1240, 159, 20));

        btnSlot10.setBackground(new java.awt.Color(204, 0, 51));
        btnSlot10.setFont(new java.awt.Font("Al Nile", 1, 14)); // NOI18N
        btnSlot10.setForeground(new java.awt.Color(255, 255, 255));
        btnSlot10.setText("Press Here");
        btnSlot10.setBorder(null);
        btnSlot10.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSlot10.setIconTextGap(5);
        btnSlot10.setMargin(new java.awt.Insets(15, 14, 2, 14));
        btnSlot10.setName(""); // NOI18N
        btnSlot10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSlot10ActionPerformed(evt);
            }
        });
        jPanel2.add(btnSlot10, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 1280, 159, 43));

        lblStock1.setBackground(new java.awt.Color(255, 204, 204));
        lblStock1.setFont(new java.awt.Font("Arial Hebrew", 1, 16)); // NOI18N
        lblStock1.setForeground(new java.awt.Color(0, 0, 0));
        lblStock1.setText(" ");
        lblStock1.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(0, 0, 0)));
        jPanel2.add(lblStock1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 350, 36, 37));

        lblStock2.setBackground(new java.awt.Color(255, 204, 204));
        lblStock2.setFont(new java.awt.Font("Arial Hebrew", 1, 16)); // NOI18N
        lblStock2.setForeground(new java.awt.Color(0, 0, 0));
        lblStock2.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(0, 0, 0)));
        jPanel2.add(lblStock2, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 350, 36, 37));

        lblStock3.setBackground(new java.awt.Color(255, 204, 204));
        lblStock3.setFont(new java.awt.Font("Arial Hebrew", 1, 16)); // NOI18N
        lblStock3.setForeground(new java.awt.Color(0, 0, 0));
        lblStock3.setText(" ");
        lblStock3.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(0, 0, 0)));
        jPanel2.add(lblStock3, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 350, 36, 37));

        lblStock4.setBackground(new java.awt.Color(255, 204, 204));
        lblStock4.setFont(new java.awt.Font("Arial Hebrew", 1, 16)); // NOI18N
        lblStock4.setForeground(new java.awt.Color(0, 0, 0));
        lblStock4.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(0, 0, 0)));
        jPanel2.add(lblStock4, new org.netbeans.lib.awtextra.AbsoluteConstraints(37, 769, 36, 37));

        lblStock5.setBackground(new java.awt.Color(255, 204, 204));
        lblStock5.setFont(new java.awt.Font("Arial Hebrew", 1, 16)); // NOI18N
        lblStock5.setForeground(new java.awt.Color(0, 0, 0));
        lblStock5.setText(" ");
        lblStock5.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(0, 0, 0)));
        jPanel2.add(lblStock5, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 770, 36, 37));

        lblStock6.setBackground(new java.awt.Color(255, 204, 204));
        lblStock6.setFont(new java.awt.Font("Arial Hebrew", 1, 16)); // NOI18N
        lblStock6.setForeground(new java.awt.Color(0, 0, 0));
        lblStock6.setText(" ");
        lblStock6.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(0, 0, 0)));
        jPanel2.add(lblStock6, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 770, 36, 37));

        lblStock9.setBackground(new java.awt.Color(255, 204, 204));
        lblStock9.setFont(new java.awt.Font("Arial Hebrew", 1, 16)); // NOI18N
        lblStock9.setForeground(new java.awt.Color(0, 0, 0));
        lblStock9.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(0, 0, 0)));
        jPanel2.add(lblStock9, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 1230, 36, 37));

        lblStock7.setBackground(new java.awt.Color(255, 204, 204));
        lblStock7.setFont(new java.awt.Font("Arial Hebrew", 1, 16)); // NOI18N
        lblStock7.setForeground(new java.awt.Color(0, 0, 0));
        lblStock7.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(0, 0, 0)));
        jPanel2.add(lblStock7, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 1230, 36, 37));

        lblStock8.setBackground(new java.awt.Color(255, 204, 204));
        lblStock8.setFont(new java.awt.Font("Arial Hebrew", 1, 16)); // NOI18N
        lblStock8.setForeground(new java.awt.Color(0, 0, 0));
        lblStock8.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(0, 0, 0)));
        jPanel2.add(lblStock8, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 1230, 36, 37));

        lblStock10.setBackground(new java.awt.Color(255, 204, 204));
        lblStock10.setFont(new java.awt.Font("Arial Hebrew", 1, 16)); // NOI18N
        lblStock10.setForeground(new java.awt.Color(0, 0, 0));
        lblStock10.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(0, 0, 0)));
        jPanel2.add(lblStock10, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 1230, 36, 37));
        jPanel2.add(lblSlot8, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 960, 190, 260));

        jPanel5.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 150, 960, 1410));

        jPanel4.setBackground(new java.awt.Color(245, 245, 245));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtAreaItems.setBackground(new java.awt.Color(255, 255, 255));
        txtAreaItems.setColumns(20);
        txtAreaItems.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        txtAreaItems.setForeground(new java.awt.Color(153, 0, 0));
        txtAreaItems.setRows(5);
        jScrollPane4.setViewportView(txtAreaItems);

        jPanel4.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 80, 390, 268));

        lblMoneyInserted.setFont(new java.awt.Font("Apple SD Gothic Neo", 3, 20)); // NOI18N
        lblMoneyInserted.setForeground(new java.awt.Color(102, 0, 0));
        lblMoneyInserted.setText("Money Inserted: ");
        jPanel4.add(lblMoneyInserted, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 890, -1, 39));

        txtTotalPrice.setBackground(new java.awt.Color(245, 245, 245));
        txtTotalPrice.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 15)); // NOI18N
        txtTotalPrice.setForeground(new java.awt.Color(0, 0, 0));
        txtTotalPrice.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jPanel4.add(txtTotalPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 384, 139, 39));

        lblSelectItems.setFont(new java.awt.Font(".SF NS Text", 1, 15)); // NOI18N
        lblSelectItems.setForeground(new java.awt.Color(0, 0, 0));
        lblSelectItems.setText("You have selected following item:");
        jPanel4.add(lblSelectItems, new org.netbeans.lib.awtextra.AbsoluteConstraints(26, 27, -1, -1));

        lblInsertMoney.setFont(new java.awt.Font(".SF NS Text", 1, 15)); // NOI18N
        lblInsertMoney.setForeground(new java.awt.Color(0, 0, 0));
        lblInsertMoney.setText("Please insert your money :");
        jPanel4.add(lblInsertMoney, new org.netbeans.lib.awtextra.AbsoluteConstraints(26, 462, -1, -1));

        jSeparator1.setBackground(new java.awt.Color(51, 51, 51));
        jSeparator1.setForeground(new java.awt.Color(0, 0, 0));
        jPanel4.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 440, 411, -1));

        btn10sen.setBackground(new java.awt.Color(255, 255, 255));
        btn10sen.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn10sen.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btn10senMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btn10senMouseExited(evt);
            }
        });
        btn10sen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn10senActionPerformed(evt);
            }
        });
        jPanel4.add(btn10sen, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 500, 90, 90));

        btn20sen.setBackground(new java.awt.Color(255, 255, 255));
        btn20sen.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn20sen.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btn20senMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btn20senMouseExited(evt);
            }
        });
        btn20sen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn20senActionPerformed(evt);
            }
        });
        jPanel4.add(btn20sen, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 500, 120, 110));

        btn50sen.setBackground(new java.awt.Color(255, 255, 255));
        btn50sen.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn50sen.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btn50senMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btn50senMouseExited(evt);
            }
        });
        btn50sen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn50senActionPerformed(evt);
            }
        });
        jPanel4.add(btn50sen, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 500, 120, 110));

        btnRM10.setBackground(new java.awt.Color(255, 255, 255));
        btnRM10.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnRM10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnRM10MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnRM10MouseExited(evt);
            }
        });
        btnRM10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRM10ActionPerformed(evt);
            }
        });
        jPanel4.add(btnRM10, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 750, 220, 110));

        btnRM1.setBackground(new java.awt.Color(255, 255, 255));
        btnRM1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnRM1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnRM1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnRM1MouseExited(evt);
            }
        });
        btnRM1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRM1ActionPerformed(evt);
            }
        });
        jPanel4.add(btnRM1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 630, 160, 100));

        txtMoneyInserted.setBackground(new java.awt.Color(245, 245, 245));
        txtMoneyInserted.setFont(new java.awt.Font(".SF NS Text", 0, 15)); // NOI18N
        txtMoneyInserted.setForeground(new java.awt.Color(0, 0, 0));
        txtMoneyInserted.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jPanel4.add(txtMoneyInserted, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 890, 164, 39));

        lblTotalPrice.setFont(new java.awt.Font("Apple SD Gothic Neo", 3, 20)); // NOI18N
        lblTotalPrice.setForeground(new java.awt.Color(102, 0, 0));
        lblTotalPrice.setText("Price: ");
        jPanel4.add(lblTotalPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(129, 383, -1, 39));

        jSeparator2.setBackground(new java.awt.Color(51, 51, 51));
        jSeparator2.setForeground(new java.awt.Color(0, 0, 0));
        jPanel4.add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 1130, 411, -1));

        lblChange.setFont(new java.awt.Font("Apple SD Gothic Neo", 3, 20)); // NOI18N
        lblChange.setForeground(new java.awt.Color(102, 0, 0));
        lblChange.setText("Change :");
        jPanel4.add(lblChange, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 1220, 90, 39));

        txtChange.setBackground(new java.awt.Color(245, 245, 245));
        txtChange.setFont(new java.awt.Font(".SF NS Text", 0, 15)); // NOI18N
        txtChange.setForeground(new java.awt.Color(153, 0, 0));
        txtChange.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jPanel4.add(txtChange, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 1210, 176, 50));

        jLabel12.setBackground(new java.awt.Color(0, 0, 0));
        jLabel12.setFont(new java.awt.Font(".SF NS Text", 1, 13)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(0, 0, 0));
        jLabel12.setText("Reset Vending Machine:");
        jPanel4.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 1350, -1, -1));

        btnCancel.setBackground(new java.awt.Color(245, 245, 245));
        btnCancel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });
        jPanel4.add(btnCancel, new org.netbeans.lib.awtextra.AbsoluteConstraints(362, 1320, 60, 50));

        lblSelectItems2.setFont(new java.awt.Font(".SF NS Text", 1, 15)); // NOI18N
        lblSelectItems2.setForeground(new java.awt.Color(0, 0, 0));
        lblSelectItems2.setText("Please take your money :");
        jPanel4.add(lblSelectItems2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 1150, -1, -1));

        btnRM5.setBackground(new java.awt.Color(255, 255, 255));
        btnRM5.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnRM5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnRM5MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnRM5MouseExited(evt);
            }
        });
        btnRM5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRM5ActionPerformed(evt);
            }
        });
        jPanel4.add(btnRM5, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 630, 170, 100));

        btnPay.setBackground(new java.awt.Color(102, 0, 0));
        btnPay.setFont(new java.awt.Font(".AppleSystemUIFont", 1, 18)); // NOI18N
        btnPay.setForeground(new java.awt.Color(255, 255, 255));
        btnPay.setText("Pay");
        btnPay.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnPay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPayActionPerformed(evt);
            }
        });
        jPanel4.add(btnPay, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 970, 180, 50));

        jSeparator3.setBackground(new java.awt.Color(51, 51, 51));
        jSeparator3.setForeground(new java.awt.Color(0, 0, 0));
        jPanel4.add(jSeparator3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 1380, 411, 10));

        btnResetPayment.setBackground(new java.awt.Color(0, 102, 51));
        btnResetPayment.setFont(new java.awt.Font(".AppleSystemUIFont", 1, 18)); // NOI18N
        btnResetPayment.setForeground(new java.awt.Color(255, 255, 255));
        btnResetPayment.setText("Reset Money ");
        btnResetPayment.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnResetPayment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetPaymentActionPerformed(evt);
            }
        });
        jPanel4.add(btnResetPayment, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 970, 170, 50));

        jPanel5.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(970, 150, 440, 1410));

        jScrollPane3.setViewportView(jPanel5);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 1425, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 1560, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSlot2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSlot2ActionPerformed
        itemSlot2();
    }//GEN-LAST:event_btnSlot2ActionPerformed

    private void btnSlot3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSlot3ActionPerformed
        itemSlot3();
    }//GEN-LAST:event_btnSlot3ActionPerformed

    private void btnSlot1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSlot1ActionPerformed
        itemSlot1();
    }//GEN-LAST:event_btnSlot1ActionPerformed

    private void btnSlot4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSlot4ActionPerformed

        itemSlot4();
    }//GEN-LAST:event_btnSlot4ActionPerformed

    private void btnSlot5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSlot5ActionPerformed
        itemSlot5();

    }//GEN-LAST:event_btnSlot5ActionPerformed

    private void btnSlot6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSlot6ActionPerformed
        itemSlot6();
    }//GEN-LAST:event_btnSlot6ActionPerformed

    private void btnSlot7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSlot7ActionPerformed
        itemSlot7();
    }//GEN-LAST:event_btnSlot7ActionPerformed

    private void btnSlot8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSlot8ActionPerformed

        itemSlot8();
    }//GEN-LAST:event_btnSlot8ActionPerformed

    private void btnSlot9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSlot9ActionPerformed

        itemSlot9();
    }//GEN-LAST:event_btnSlot9ActionPerformed

    private void btnSlot10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSlot10ActionPerformed

        itemSlot10();
    }//GEN-LAST:event_btnSlot10ActionPerformed

    private void btnVerifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerifyActionPerformed
        new StaffVerification().setVisible(true);
        this.dispose();

    }//GEN-LAST:event_btnVerifyActionPerformed

    private void btnRM1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRM1ActionPerformed
        //This sets the button value
        double btnInsertedValue;
        cashFormat.format(btnInsertedValue = 1.00);
        incrementMoney(btnInsertedValue);
    }//GEN-LAST:event_btnRM1ActionPerformed

    private void btn50senActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn50senActionPerformed
        //This sets the button value
        double btnInsertedValue;
        cashFormat.format(btnInsertedValue = 0.50);
        incrementMoney(btnInsertedValue);
    }//GEN-LAST:event_btn50senActionPerformed

    private void btn10senMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn10senMouseEntered
        btn10sen.setBackground(new Color(00000));
    }//GEN-LAST:event_btn10senMouseEntered

    private void btn10senMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn10senMouseExited
        btn10sen.setBackground(new Color(255, 255, 255));
    }//GEN-LAST:event_btn10senMouseExited

    private void btn20senMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn20senMouseEntered
        btn20sen.setBackground(new Color(00000));
    }//GEN-LAST:event_btn20senMouseEntered

    private void btn20senMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn20senMouseExited
        btn20sen.setBackground(new Color(255, 255, 255));
    }//GEN-LAST:event_btn20senMouseExited

    private void btn50senMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn50senMouseEntered
        btn50sen.setBackground(new Color(00000));
    }//GEN-LAST:event_btn50senMouseEntered

    private void btn50senMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn50senMouseExited
        btn50sen.setBackground(new Color(255, 255, 255));
    }//GEN-LAST:event_btn50senMouseExited

    private void btnRM1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRM1MouseEntered
        btnRM1.setBackground(new Color(00000));
    }//GEN-LAST:event_btnRM1MouseEntered

    private void btnRM1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRM1MouseExited
        btnRM1.setBackground(new Color(255, 255, 255));
    }//GEN-LAST:event_btnRM1MouseExited

    private void btnRM5MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRM5MouseEntered
        btnRM5.setBackground(new Color(00000));
    }//GEN-LAST:event_btnRM5MouseEntered

    private void btnRM5MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRM5MouseExited
        btnRM5.setBackground(new Color(255, 255, 255));
    }//GEN-LAST:event_btnRM5MouseExited

    private void btnRM10MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRM10MouseEntered
        btnRM10.setBackground(new Color(00000));
    }//GEN-LAST:event_btnRM10MouseEntered

    private void btnRM10MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRM10MouseExited
        btnRM10.setBackground(new Color(255, 255, 255));
    }//GEN-LAST:event_btnRM10MouseExited

    private void btn10senActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn10senActionPerformed
        //This sets the button value
        double btnInsertedValue;
        cashFormat.format(btnInsertedValue = 0.10);
        incrementMoney(btnInsertedValue);
    }//GEN-LAST:event_btn10senActionPerformed

    private void btn20senActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn20senActionPerformed
        //This sets the button value
        double btnInsertedValue;
        cashFormat.format(btnInsertedValue = 0.20);
        incrementMoney(btnInsertedValue);
    }//GEN-LAST:event_btn20senActionPerformed

    private void btnRM5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRM5ActionPerformed
        //This sets the button value
        double btnInsertedValue;
        cashFormat.format(btnInsertedValue = 5.00);
        incrementMoney(btnInsertedValue);
    }//GEN-LAST:event_btnRM5ActionPerformed

    private void btnRM10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRM10ActionPerformed
        //This sets the button value
        double btnInsertedValue;
        cashFormat.format(btnInsertedValue = 10.00);
        incrementMoney(btnInsertedValue);
    }//GEN-LAST:event_btnRM10ActionPerformed

    private void btnPayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPayActionPerformed
       //This button will execute this method when it has been clicked
        purchaseProcess();
    }//GEN-LAST:event_btnPayActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        enableItems();
        getItemDetails();
        changeMoney = enteredMoney - enteredMoney;
        String change = cashFormat.format(changeMoney);
        txtChange.setText(change);
        txtChange.setText("");

        projectDir = System.getProperty("user.dir");
        File cartItem = new File(projectDir + "//db_txtfiles//CartItem.txt");

        if (cartItem.exists()) {
            cartItem.delete();
        }

    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnResetPaymentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetPaymentActionPerformed
        if ("".equals(txtMoneyInserted.getText()) && "".equals(txtChange.getText())) {
            JOptionPane.showMessageDialog(null, "Fields is already empty!", "Empty fields!", JOptionPane.WARNING_MESSAGE);
        }
        resetMoneyEntered();
    }//GEN-LAST:event_btnResetPaymentActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainVMFram.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainVMFram.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainVMFram.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainVMFram.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //Frame Customization
                MainVMFram window = new MainVMFram();
                window.setVisible(true);
                window.setTitle("The Vending Machine");
                window.setResizable(false);
                window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            }
        });

    }

    //Display current date
    public void showDate() {
        StyledDocument doc = txtDateDisplay.getStyledDocument();
        SimpleAttributeSet center = new SimpleAttributeSet();
        StyleConstants.setAlignment(center, StyleConstants.ALIGN_CENTER);
        doc.setParagraphAttributes(0, doc.getLength(), center, false);
        txtDateDisplay.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));

        Date date = new Date();
        SimpleDateFormat dformat = new SimpleDateFormat("dd/MM/yyyy");
        txtDateDisplay.setText(dformat.format(date));
        txtDateDisplay.setEditable(false);
    }

    //Disaply current time
    public void showTime() {
        StyledDocument doc = txtTimeDisplay.getStyledDocument();
        SimpleAttributeSet center = new SimpleAttributeSet();
        StyleConstants.setAlignment(center, StyleConstants.ALIGN_CENTER);
        doc.setParagraphAttributes(0, doc.getLength(), center, false);
        txtTimeDisplay.setEditable(false);
        txtTimeDisplay.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));

        //seconds countdown
        Thread time = new Thread() {
            public void run() {
                try {
                    for (;;) {
                        Calendar cal = new GregorianCalendar();
                        int day = cal.get(Calendar.AM_PM);
                        int second = cal.get(Calendar.SECOND);
                        int minute = cal.get(Calendar.MINUTE);
                        int hour = cal.get(Calendar.HOUR);
                        String am_pm = "am_pm";
                        if (day == 0) {
                            am_pm = "AM";
                        } else {
                            am_pm = "PM";
                        }
                        txtTimeDisplay.setText(hour + ":" + minute + ":" + second + " " + am_pm);
                        sleep(1000);
                    }
                } catch (InterruptedException ex) {
                    Logger.getLogger(MainVMFram.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

        };

        time.start();

    }

    //This method change the labes background color
    public void lblbackgroundColor() {
        lbl1.setOpaque(true);
        lbl2.setOpaque(true);
        lbl3.setOpaque(true);
        lbl4.setOpaque(true);
        lbl5.setOpaque(true);
        lbl6.setOpaque(true);
        lbl7.setOpaque(true);
        lbl8.setOpaque(true);
        lbl9.setOpaque(true);
        lbl10.setOpaque(true);

    }

    //This method is to set the image icon
    private void getImgIcon() {
        projectDir = System.getProperty("user.dir") + "//Images//";
        ImageIcon imageKey = new ImageIcon(projectDir + "keyopen.jpg");
        Image imgKey = imageKey.getImage();
        btnVerify.setIcon(new ImageIcon(imgKey));

        ImageIcon imageCancel = new ImageIcon(projectDir + "crossicon.png");
        Image imgCancel = imageCancel.getImage();
        btnCancel.setIcon(new ImageIcon(imgCancel));

        ImageIcon image10sen = new ImageIcon(projectDir + "10sen.png");
        Image img10sen = image10sen.getImage();
        btn10sen.setIcon(new ImageIcon(img10sen));

        ImageIcon image50sen = new ImageIcon(projectDir + "50sen.png");
        Image img50sen = image50sen.getImage();
        btn50sen.setIcon(new ImageIcon(img50sen));

        ImageIcon image20sen = new ImageIcon(projectDir + "20sen.png");
        Image img20sen = image20sen.getImage();
        btn20sen.setIcon(new ImageIcon(img20sen));

        ImageIcon imageRM1 = new ImageIcon(projectDir + "rm1.jpg");
        Image imgRM1 = imageRM1.getImage();
        btnRM1.setIcon(new ImageIcon(imgRM1));

        ImageIcon imageRM5 = new ImageIcon(projectDir + "rm5.jpg");
        Image imgRM5 = imageRM5.getImage();
        btnRM5.setIcon(new ImageIcon(imgRM5));

        ImageIcon imageRM10 = new ImageIcon(projectDir + "rm10.jpg");
        Image imgRM10 = imageRM10.getImage();
        btnRM10.setIcon(new ImageIcon(imgRM10));
    }

    //This is to get item details from the texfile to the labels
    private void getItemDetails() {

        try {
            customEmptySlot();
            //This sets the project direcotry for the stock file
            projectDir = System.getProperty("user.dir");
            File stockFile = new File(projectDir + "//db_txtfiles//StockItem.txt");

            //This will create the stock file if it doesn't exist in the project directory
            if (!stockFile.exists()) {
                stockFile.createNewFile();
            }
            //This is to read the file in order to get the details from the text file
            FileReader fr = new FileReader(stockFile);
            BufferedReader br = new BufferedReader(fr);

            //This sets a temporary array
            String[] itemDetails;
            String itemRecord;
            int slotCount = 1;

            while ((itemRecord = br.readLine()) != null) {
                // This splits the details by using the colon and store in an array.
                itemDetails = itemRecord.split(":");

                //This gets the array details into the variables
                String lblCode = itemDetails[0];
                String lblItem = itemDetails[1];
                String lblPrice = itemDetails[2];
                String lblStock = itemDetails[3];
                String lblSlot = itemDetails[4];
                String lbldash = " - ";
                String lblringgit = "RM ";

                //This is to set as empty if the slot doesn't have items into it
                if ("*".equals(lblItem)) {
                    lblItem = "Slot is empty!";
                    lblPrice = "";
                    lbldash = "";
                    lblringgit = "";
                    lblStock = " #";
                    lblSlot = "empty.jpg";

                } else {

                }
                //This will get all the available items from the file
                getItemSlot(slotCount, lblCode, lblItem, lblPrice, lblStock, lblSlot, lbldash, lblringgit);
                //This increments the slot count by 1
                ++slotCount;
            }
            //This is to close the buffered reader
            br.close();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }

    //This is to get item details from the texfile to the labels
    public void getItemSlot(int slotCount, String lblCode, String lblItem, String lblPrice, String lblStock, String lblSlot, String dash, String lblringgit) {

        try {
            //This sets the project directory for the image 
            String imgFile = projectDir + "//ItemImg//" + lblSlot;
            //This is to get the image from the folder
            ImageIcon imgIcon = new ImageIcon(imgFile);
            Image image = imgIcon.getImage();

            switch (slotCount) {
                case 1:
                    lblCode = "01";
                    lblItem1.setText(lblItem + dash + lblringgit + lblPrice);
                    lblStock1.setText(" " + lblStock);
                    lblSlot1.setIcon(new ImageIcon(image));
                    break;

                case 2:

                    lblCode = "02";
                    lblItem2.setText(lblItem + dash + lblringgit + lblPrice);
                    lblStock2.setText(" " + lblStock);
                    lblSlot2.setIcon(new ImageIcon(image));
                    break;

                case 3:

                    lblCode = "03";
                    lblItem3.setText(lblItem + dash + lblringgit + lblPrice);
                    lblStock3.setText(" " + lblStock);
                    lblSlot3.setIcon(new ImageIcon(image));
                    break;

                case 4:

                    lblCode = "04";
                    lblItem4.setText(lblItem + dash + lblringgit + lblPrice);
                    lblStock4.setText(" " + lblStock);
                    lblSlot4.setIcon(new ImageIcon(image));
                    break;

                case 5:

                    lblCode = "05";
                    lblItem5.setText(lblItem + dash + lblringgit + lblPrice);
                    lblStock5.setText(" " + lblStock);
                    lblSlot5.setIcon(new ImageIcon(image));
                    break;

                case 6:

                    lblCode = "06";
                    lblItem6.setText(lblItem + dash + lblringgit + lblPrice);
                    lblStock6.setText(" " + lblStock);
                    lblSlot6.setIcon(new ImageIcon(image));
                    break;

                case 7:

                    lblCode = "07";
                    lblItem7.setText(lblItem + dash + lblringgit + lblPrice);
                    lblStock7.setText(" " + lblStock);
                    lblSlot7.setIcon(new ImageIcon(image));
                    break;

                case 8:

                    lblCode = "08";
                    lblItem8.setText(lblItem + dash + lblringgit + lblPrice);
                    lblStock8.setText(" " + lblStock);
                    lblSlot8.setIcon(new ImageIcon(image));
                    break;

                case 9:
                    lblCode = "09";
                    lblItem9.setText(lblItem + dash + lblringgit + lblPrice);
                    lblStock9.setText(" " + lblStock);
                    lblSlot9.setIcon(new ImageIcon(image));
                    break;
                case 10:
                    lblCode = "10";
                    lblItem10.setText(lblItem + dash + lblringgit + lblPrice);
                    lblStock10.setText(" " + lblStock);
                    lblSlot10.setIcon(new ImageIcon(image));
                    break;

            }

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex);
        }

    }

    //This is to set the button disabled and change the font color when the slot is empty
    private void customEmptySlot() {
        String[] itemDetails;   // This array is to store all lines

        try {
            projectDir = System.getProperty("user.dir");
            File stockFile = new File(projectDir + "//db_txtfiles//StockItem.txt");

            if (!stockFile.exists()) {
                stockFile.createNewFile();
            }

            Scanner searchSlot = new Scanner(stockFile);
            // Read till last line of file
            while (searchSlot.hasNext()) {
                // Read the next line.
                String inputSlot = searchSlot.nextLine();
                // Split the details by using the colon and store in an array.
                itemDetails = inputSlot.split(":");

                if ("01".equals(itemDetails[0]) && "*".equals(itemDetails[1])) {
                    lblItem1.setForeground(Color.RED);
                    lblStock1.setForeground(Color.RED);
                    btnSlot1.setEnabled(false);

                } else if ("02".equals(itemDetails[0]) && "*".equals(itemDetails[1])) {
                    lblItem2.setForeground(Color.RED);
                    lblStock2.setForeground(Color.RED);
                    btnSlot2.setEnabled(false);

                } else if ("03".equals(itemDetails[0]) && "*".equals(itemDetails[1])) {
                    lblItem3.setForeground(Color.RED);
                    lblStock3.setForeground(Color.RED);
                    btnSlot3.setEnabled(false);

                } else if ("04".equals(itemDetails[0]) && "*".equals(itemDetails[1])) {
                    lblItem4.setForeground(Color.RED);
                    lblStock4.setForeground(Color.RED);
                    btnSlot4.setEnabled(false);

                } else if ("05".equals(itemDetails[0]) && "*".equals(itemDetails[1])) {
                    lblItem5.setForeground(Color.RED);
                    lblStock5.setForeground(Color.RED);
                    btnSlot5.setEnabled(false);

                } else if ("06".equals(itemDetails[0]) && "*".equals(itemDetails[1])) {
                    lblItem6.setForeground(Color.RED);
                    lblStock6.setForeground(Color.RED);
                    btnSlot6.setEnabled(false);
                } else if ("07".equals(itemDetails[0]) && "*".equals(itemDetails[1])) {
                    lblItem7.setForeground(Color.RED);
                    lblStock7.setForeground(Color.RED);
                    btnSlot7.setEnabled(false);
                } else if ("08".equals(itemDetails[0]) && "*".equals(itemDetails[1])) {
                    lblItem8.setForeground(Color.RED);
                    lblStock8.setForeground(Color.RED);
                    btnSlot8.setEnabled(false);
                } else if ("09".equals(itemDetails[0]) && "*".equals(itemDetails[1])) {
                    lblItem9.setForeground(Color.RED);
                    lblStock9.setForeground(Color.RED);
                    btnSlot9.setEnabled(false);
                } else if ("10".equals(itemDetails[0]) && "*".equals(itemDetails[1])) {
                    lblItem10.setForeground(Color.RED);
                    lblStock10.setForeground(Color.RED);
                    btnSlot10.setEnabled(false);
                }

            }
            searchSlot.close();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex);
        }

    }

    //This method hides the items
    public void disableItems() {
        btnSlot1.setEnabled(false);
        btnSlot2.setEnabled(false);

        btnSlot3.setEnabled(false);
        btnSlot4.setEnabled(false);

        btnSlot5.setEnabled(false);
        btnSlot6.setEnabled(false);

        btnSlot7.setEnabled(false);
        btnSlot8.setEnabled(false);

        btnSlot9.setEnabled(false);
        btnSlot10.setEnabled(false);

    }

    //This method will show the items
    public void enableItems() {
        btnSlot1.setEnabled(true);
        btnSlot2.setEnabled(true);

        btnSlot3.setEnabled(true);
        btnSlot4.setEnabled(true);

        btnSlot5.setEnabled(true);
        btnSlot6.setEnabled(true);

        btnSlot7.setEnabled(true);
        btnSlot8.setEnabled(true);

        btnSlot9.setEnabled(true);
        btnSlot10.setEnabled(true);

        txtAreaItems.setText("");
        txtTotalPrice.setText("");

        enteredMoney -= enteredMoney;
        String payment = cashFormat.format(enteredMoney);
        txtMoneyInserted.setText(payment);
        txtMoneyInserted.setText("");
    }

    //This method will be initiated when slot 1  button is pressed
    private void itemSlot1() {

        //This is to disable some of the items 
        disableItems();
        try {

            //This sets the project direcotry for the stock file
            projectDir = System.getProperty("user.dir");
            File stockFile = new File(projectDir + "//db_txtfiles//StockItem.txt");

            //This is to read the file in order to get the details from the text file
            FileReader fr = new FileReader(stockFile);
            BufferedReader br = new BufferedReader(fr);

            //This sets a temporary array
            String[] itemDetails;
            String itemRecord;
            int qty = 1;

            while ((itemRecord = br.readLine()) != null) {
                // This splits the details by using the colon and store in an array.

                itemDetails = itemRecord.split(":");

                if ("01".equals(itemDetails[0])) {

                    txtAreaItems.setFont(txtAreaItems.getFont().deriveFont(Font.BOLD, txtAreaItems.getFont().getSize()));
                    txtAreaItems.append("                           Welcome" + "\n");
                    txtAreaItems.append("                    The Vending Machine" + "\n");
                    txtAreaItems.append("                                                   " + "\n");
                    txtAreaItems.append("--------------------------------------" + "\n");
                    txtAreaItems.append(" Item Code         Item Name         Item Price " + "\n");
                    txtAreaItems.append("--------------------------------------" + "\n");
                    txtAreaItems.append("                                                   " + "\n");
                    txtAreaItems.append("                                                   " + "\n");
                    txtAreaItems.append("   " + itemDetails[0] + "                    " + itemDetails[1] + "             " + "RM " + itemDetails[2] + "   x 1");
                    txtAreaItems.append("                                                   " + "\n");
                    txtAreaItems.append("                                                   " + "\n");
                    txtAreaItems.append("                                                   " + "\n");
                    txtAreaItems.append("-------------------------------------" + "\n");
                    txtAreaItems.setLineWrap(true);
                    txtTotalPrice.setText("RM " + itemDetails[2]);

                    File cartFile = new File(projectDir + "//db_txtfiles//CartItem.txt");
                    if (!cartFile.exists()) {
                        cartFile.createNewFile();

                    }

                    FileWriter fw = new FileWriter(cartFile, true);
                    BufferedWriter bw = new BufferedWriter(fw);
                    bw.write(itemDetails[0] + ":" + itemDetails[1] + ":" + itemDetails[2] + ":" + qty + "\n");
                    bw.close();

                }
            }
            br.close();
        } catch (Exception ex) {

        }

    }

    //This method will be initiated when slot 2 button is pressed
    private void itemSlot2() {
        //This is to disable some of the items 
        disableItems();
        try {

            //This sets the project direcotry for the stock file
            projectDir = System.getProperty("user.dir");
            File stockFile = new File(projectDir + "//db_txtfiles//StockItem.txt");

            //This is to read the file in order to get the details from the text file
            FileReader fr = new FileReader(stockFile);
            BufferedReader br = new BufferedReader(fr);

            //This sets a temporary array
            String[] itemDetails;
            String itemRecord;
            int qty = 1;
            while ((itemRecord = br.readLine()) != null) {
                // This splits the details by using the colon and store in an array.

                itemDetails = itemRecord.split(":");

                if ("02".equals(itemDetails[0])) {
                    txtTotalPrice.setText("RM " + itemDetails[2]);
                    txtAreaItems.setFont(txtAreaItems.getFont().deriveFont(Font.BOLD, txtAreaItems.getFont().getSize()));
                    txtAreaItems.append("                    The Vending Machine" + "\n");
                    txtAreaItems.append("                                                   " + "\n");
                    txtAreaItems.append("--------------------------------------" + "\n");
                    txtAreaItems.append(" Item Code         Item Name         Item Price " + "\n");
                    txtAreaItems.append("--------------------------------------" + "\n");
                    txtAreaItems.append("                                                   " + "\n");
                    txtAreaItems.append("                                                   " + "\n");
                    txtAreaItems.append("   " + itemDetails[0] + "                    " + itemDetails[1] + "             " + "RM " + itemDetails[2] + "   x 1");
                    txtAreaItems.append("                                                   " + "\n");
                    txtAreaItems.append("                                                   " + "\n");
                    txtAreaItems.append("                                                   " + "\n");
                    txtAreaItems.append("-------------------------------------" + "\n");
                    txtAreaItems.setLineWrap(true);

                    File cartFile = new File(projectDir + "//db_txtfiles//CartItem.txt");
                    if (!cartFile.exists()) {
                        cartFile.createNewFile();

                    }

                    FileWriter fw = new FileWriter(cartFile, true);
                    BufferedWriter bw = new BufferedWriter(fw);
                    bw.write(itemDetails[0] + ":" + itemDetails[1] + ":" + itemDetails[2] + ":" + qty + "\n");
                    bw.close();

                }
            }
            br.close();
        } catch (Exception ex) {

        }

    }

    //This method will be initiated when slot 3 is picked
    private void itemSlot3() {

        //This is to disable some of the items 
        disableItems();
        try {

            //This sets the project direcotry for the stock file
            projectDir = System.getProperty("user.dir");
            File stockFile = new File(projectDir + "//db_txtfiles//StockItem.txt");

            //This is to read the file in order to get the details from the text file
            FileReader fr = new FileReader(stockFile);
            BufferedReader br = new BufferedReader(fr);

            //This sets a temporary array
            String[] itemDetails;
            String itemRecord;
            int qty = 1;
            while ((itemRecord = br.readLine()) != null) {
                // This splits the details by using the colon and store in an array.

                itemDetails = itemRecord.split(":");

                if ("03".equals(itemDetails[0])) {
                    txtTotalPrice.setText("RM " + itemDetails[2]);
                    txtAreaItems.setFont(txtAreaItems.getFont().deriveFont(Font.BOLD, txtAreaItems.getFont().getSize()));
                    txtAreaItems.append("                    The Vending Machine" + "\n");
                    txtAreaItems.append("                                                   " + "\n");
                    txtAreaItems.append("--------------------------------------" + "\n");
                    txtAreaItems.append(" Item Code         Item Name         Item Price " + "\n");
                    txtAreaItems.append("--------------------------------------" + "\n");
                    txtAreaItems.append("                                                   " + "\n");
                    txtAreaItems.append("                                                   " + "\n");
                    txtAreaItems.append("   " + itemDetails[0] + "                    " + itemDetails[1] + "             " + "RM " + itemDetails[2] + "   x 1");
                    txtAreaItems.append("                                                   " + "\n");
                    txtAreaItems.append("                                                   " + "\n");
                    txtAreaItems.append("                                                   " + "\n");
                    txtAreaItems.append("-------------------------------------" + "\n");
                    txtAreaItems.setLineWrap(true);

                    File cartFile = new File(projectDir + "//db_txtfiles//CartItem.txt");
                    if (!cartFile.exists()) {
                        cartFile.createNewFile();

                    }

                    FileWriter fw = new FileWriter(cartFile, true);
                    BufferedWriter bw = new BufferedWriter(fw);
                    bw.write(itemDetails[0] + ":" + itemDetails[1] + ":" + itemDetails[2] + ":" + qty + "\n");
                    bw.close();

                }
            }
            br.close();
        } catch (Exception ex) {

        }

    }

    //This method will be initiated when slot 4 is picked
    private void itemSlot4() {

        //This is to disable some of the items 
        disableItems();
        try {

            //This sets the project direcotry for the stock file
            projectDir = System.getProperty("user.dir");
            File stockFile = new File(projectDir + "//db_txtfiles//StockItem.txt");

            //This is to read the file in order to get the details from the text file
            FileReader fr = new FileReader(stockFile);
            BufferedReader br = new BufferedReader(fr);

            //This sets a temporary array
            String[] itemDetails;
            String itemRecord;
            int qty = 1;
            while ((itemRecord = br.readLine()) != null) {
                // This splits the details by using the colon and store in an array.

                itemDetails = itemRecord.split(":");

                if ("04".equals(itemDetails[0])) {
                    txtTotalPrice.setText("RM " + itemDetails[2]);
                    txtAreaItems.setFont(txtAreaItems.getFont().deriveFont(Font.BOLD, txtAreaItems.getFont().getSize()));
                    txtAreaItems.append("                    The Vending Machine" + "\n");
                    txtAreaItems.append("                                                   " + "\n");
                    txtAreaItems.append("--------------------------------------" + "\n");
                    txtAreaItems.append(" Item Code         Item Name         Item Price " + "\n");
                    txtAreaItems.append("--------------------------------------" + "\n");
                    txtAreaItems.append("                                                   " + "\n");
                    txtAreaItems.append("                                                   " + "\n");
                    txtAreaItems.append("   " + itemDetails[0] + "                    " + itemDetails[1] + "             " + "RM " + itemDetails[2] + "   x 1");
                    txtAreaItems.append("                                                   " + "\n");
                    txtAreaItems.append("                                                   " + "\n");
                    txtAreaItems.append("                                                   " + "\n");
                    txtAreaItems.append("-------------------------------------" + "\n");
                    txtAreaItems.setLineWrap(true);

                    File cartFile = new File(projectDir + "//db_txtfiles//CartItem.txt");
                    if (!cartFile.exists()) {
                        cartFile.createNewFile();

                    }

                    FileWriter fw = new FileWriter(cartFile, true);
                    BufferedWriter bw = new BufferedWriter(fw);
                    bw.write(itemDetails[0] + ":" + itemDetails[1] + ":" + itemDetails[2] + ":" + qty + "\n");
                    bw.close();

                }
            }
            br.close();
        } catch (Exception ex) {

        }

    }

    //This method will be initiated when slot 5 is picked
    private void itemSlot5() {

        //This is to disable some of the items 
        disableItems();
        try {

            //This sets the project direcotry for the stock file
            projectDir = System.getProperty("user.dir");
            File stockFile = new File(projectDir + "//db_txtfiles//StockItem.txt");

            //This is to read the file in order to get the details from the text file
            FileReader fr = new FileReader(stockFile);
            BufferedReader br = new BufferedReader(fr);

            //This sets a temporary array
            String[] itemDetails;
            String itemRecord;
            int qty = 1;
            while ((itemRecord = br.readLine()) != null) {
                // This splits the details by using the colon and store in an array.

                itemDetails = itemRecord.split(":");

                if ("05".equals(itemDetails[0])) {
                    txtTotalPrice.setText("RM " + itemDetails[2]);
                    txtAreaItems.setFont(txtAreaItems.getFont().deriveFont(Font.BOLD, txtAreaItems.getFont().getSize()));
                    txtAreaItems.append("                    The Vending Machine" + "\n");
                    txtAreaItems.append("                                                   " + "\n");
                    txtAreaItems.append("--------------------------------------" + "\n");
                    txtAreaItems.append(" Item Code         Item Name         Item Price " + "\n");
                    txtAreaItems.append("--------------------------------------" + "\n");
                    txtAreaItems.append("                                                   " + "\n");
                    txtAreaItems.append("                                                   " + "\n");
                    txtAreaItems.append("   " + itemDetails[0] + "                    " + itemDetails[1] + "             " + "RM " + itemDetails[2] + "   x 1");
                    txtAreaItems.append("                                                   " + "\n");
                    txtAreaItems.append("                                                   " + "\n");
                    txtAreaItems.append("                                                   " + "\n");
                    txtAreaItems.append("-------------------------------------" + "\n");
                    txtAreaItems.setLineWrap(true);

                    File cartFile = new File(projectDir + "//db_txtfiles//CartItem.txt");
                    if (!cartFile.exists()) {
                        cartFile.createNewFile();

                    }

                    FileWriter fw = new FileWriter(cartFile, true);
                    BufferedWriter bw = new BufferedWriter(fw);
                    bw.write(itemDetails[0] + ":" + itemDetails[1] + ":" + itemDetails[2] + ":" + qty + "\n");
                    bw.close();

                }
            }
            br.close();
        } catch (Exception ex) {

        }

    }

    //This method will be initiated when slot 6 is picked
    private void itemSlot6() {

        //This is to disable some of the items 
        disableItems();
        try {

            //This sets the project direcotry for the stock file
            projectDir = System.getProperty("user.dir");
            File stockFile = new File(projectDir + "//db_txtfiles//StockItem.txt");

            //This is to read the file in order to get the details from the text file
            FileReader fr = new FileReader(stockFile);
            BufferedReader br = new BufferedReader(fr);

            //This sets a temporary array
            String[] itemDetails;
            String itemRecord;
            int qty = 1;

            while ((itemRecord = br.readLine()) != null) {
                // This splits the details by using the colon and store in an array.

                itemDetails = itemRecord.split(":");

                if ("06".equals(itemDetails[0])) {
                    txtTotalPrice.setText("RM " + itemDetails[2]);
                    txtAreaItems.setFont(txtAreaItems.getFont().deriveFont(Font.BOLD, txtAreaItems.getFont().getSize()));
                    txtAreaItems.append("                    The Vending Machine" + "\n");
                    txtAreaItems.append("                                                   " + "\n");
                    txtAreaItems.append("--------------------------------------" + "\n");
                    txtAreaItems.append(" Item Code         Item Name         Item Price " + "\n");
                    txtAreaItems.append("--------------------------------------" + "\n");
                    txtAreaItems.append("                                                   " + "\n");
                    txtAreaItems.append("                                                   " + "\n");
                    txtAreaItems.append("   " + itemDetails[0] + "                    " + itemDetails[1] + "             " + "RM " + itemDetails[2] + "   x 1");
                    txtAreaItems.append("                                                   " + "\n");
                    txtAreaItems.append("                                                   " + "\n");
                    txtAreaItems.append("                                                   " + "\n");
                    txtAreaItems.append("-------------------------------------" + "\n");
                    txtAreaItems.setLineWrap(true);

                    File cartFile = new File(projectDir + "//db_txtfiles//CartItem.txt");
                    if (!cartFile.exists()) {
                        cartFile.createNewFile();

                    }

                    FileWriter fw = new FileWriter(cartFile, true);
                    BufferedWriter bw = new BufferedWriter(fw);
                    bw.write(itemDetails[0] + ":" + itemDetails[1] + ":" + itemDetails[2] + ":" + qty + "\n");
                    bw.close();

                }
            }
            br.close();
        } catch (Exception ex) {

        }

    }

    //This method will be initiated when slot 7 is picked
    private void itemSlot7() {

        //This is to disable some of the items 
        disableItems();
        try {

            //This sets the project direcotry for the stock file
            projectDir = System.getProperty("user.dir");
            File stockFile = new File(projectDir + "//db_txtfiles//StockItem.txt");

            //This is to read the file in order to get the details from the text file
            FileReader fr = new FileReader(stockFile);
            BufferedReader br = new BufferedReader(fr);

            //This sets a temporary array
            String[] itemDetails;
            String itemRecord;
            int qty = 1;
            while ((itemRecord = br.readLine()) != null) {
                // This splits the details by using the colon and store in an array.

                itemDetails = itemRecord.split(":");

                if ("07".equals(itemDetails[0])) {
                    txtTotalPrice.setText("RM " + itemDetails[2]);
                    txtAreaItems.setFont(txtAreaItems.getFont().deriveFont(Font.BOLD, txtAreaItems.getFont().getSize()));
                    txtAreaItems.append("                    The Vending Machine" + "\n");
                    txtAreaItems.append("                                                   " + "\n");
                    txtAreaItems.append("--------------------------------------" + "\n");
                    txtAreaItems.append(" Item Code         Item Name         Item Price " + "\n");
                    txtAreaItems.append("--------------------------------------" + "\n");
                    txtAreaItems.append("                                                   " + "\n");
                    txtAreaItems.append("                                                   " + "\n");
                    txtAreaItems.append("   " + itemDetails[0] + "                    " + itemDetails[1] + "             " + "RM " + itemDetails[2] + "   x 1");
                    txtAreaItems.append("                                                   " + "\n");
                    txtAreaItems.append("                                                   " + "\n");
                    txtAreaItems.append("                                                   " + "\n");
                    txtAreaItems.append("-------------------------------------" + "\n");
                    txtAreaItems.setLineWrap(true);

                    File cartFile = new File(projectDir + "//db_txtfiles//CartItem.txt");
                    if (!cartFile.exists()) {
                        cartFile.createNewFile();

                    }

                    FileWriter fw = new FileWriter(cartFile, true);
                    BufferedWriter bw = new BufferedWriter(fw);
                    bw.write(itemDetails[0] + ":" + itemDetails[1] + ":" + itemDetails[2] + ":" + qty + "\n");
                    bw.close();

                }
            }
            br.close();
        } catch (Exception ex) {

        }

    }

    //This method will be initiated when slot 8 is picked
    private void itemSlot8() {

        //This is to disable some of the items 
        disableItems();
        try {

            //This sets the project direcotry for the stock file
            projectDir = System.getProperty("user.dir");
            File stockFile = new File(projectDir + "//db_txtfiles//StockItem.txt");

            //This is to read the file in order to get the details from the text file
            FileReader fr = new FileReader(stockFile);
            BufferedReader br = new BufferedReader(fr);

            //This sets a temporary array
            String[] itemDetails;
            String itemRecord;
            int qty = 1;
            while ((itemRecord = br.readLine()) != null) {
                // This splits the details by using the colon and store in an array.

                itemDetails = itemRecord.split(":");

                if ("08".equals(itemDetails[0])) {
                    txtTotalPrice.setText("RM " + itemDetails[2]);
                    txtAreaItems.setFont(txtAreaItems.getFont().deriveFont(Font.BOLD, txtAreaItems.getFont().getSize()));
                    txtAreaItems.append("                    The Vending Machine" + "\n");
                    txtAreaItems.append("                                                   " + "\n");
                    txtAreaItems.append("--------------------------------------" + "\n");
                    txtAreaItems.append(" Item Code         Item Name         Item Price " + "\n");
                    txtAreaItems.append("--------------------------------------" + "\n");
                    txtAreaItems.append("                                                   " + "\n");
                    txtAreaItems.append("                                                   " + "\n");
                    txtAreaItems.append("   " + itemDetails[0] + "                    " + itemDetails[1] + "             " + "RM " + itemDetails[2] + "   x 1");
                    txtAreaItems.append("                                                   " + "\n");
                    txtAreaItems.append("                                                   " + "\n");
                    txtAreaItems.append("                                                   " + "\n");
                    txtAreaItems.append("-------------------------------------" + "\n");
                    txtAreaItems.setLineWrap(true);

                    File cartFile = new File(projectDir + "//db_txtfiles//CartItem.txt");
                    if (!cartFile.exists()) {
                        cartFile.createNewFile();

                    }

                    FileWriter fw = new FileWriter(cartFile, true);
                    BufferedWriter bw = new BufferedWriter(fw);
                    bw.write(itemDetails[0] + ":" + itemDetails[1] + ":" + itemDetails[2] + ":" + qty + "\n");
                    bw.close();

                }
            }
            br.close();
        } catch (Exception ex) {

        }

    }

    //This method will be initiated when slot 9 is picked
    private void itemSlot9() {

        //This is to disable some of the items 
        disableItems();
        try {

            //This sets the project direcotry for the stock file
            projectDir = System.getProperty("user.dir");
            File stockFile = new File(projectDir + "//db_txtfiles//StockItem.txt");

            //This is to read the file in order to get the details from the text file
            FileReader fr = new FileReader(stockFile);
            BufferedReader br = new BufferedReader(fr);

            //This sets a temporary array
            String[] itemDetails;
            String itemRecord;
            int qty = 1;
            while ((itemRecord = br.readLine()) != null) {
                // This splits the details by using the colon and store in an array.

                itemDetails = itemRecord.split(":");

                if ("09".equals(itemDetails[0])) {
                    txtTotalPrice.setText("RM " + itemDetails[2]);
                    txtAreaItems.setFont(txtAreaItems.getFont().deriveFont(Font.BOLD, txtAreaItems.getFont().getSize()));
                    txtAreaItems.append("                    The Vending Machine" + "\n");
                    txtAreaItems.append("                                                   " + "\n");
                    txtAreaItems.append("--------------------------------------" + "\n");
                    txtAreaItems.append(" Item Code         Item Name         Item Price " + "\n");
                    txtAreaItems.append("--------------------------------------" + "\n");
                    txtAreaItems.append("                                                   " + "\n");
                    txtAreaItems.append("                                                   " + "\n");
                    txtAreaItems.append("   " + itemDetails[0] + "                    " + itemDetails[1] + "             " + "RM " + itemDetails[2] + "   x 1");
                    txtAreaItems.append("                                                   " + "\n");
                    txtAreaItems.append("                                                   " + "\n");
                    txtAreaItems.append("                                                   " + "\n");
                    txtAreaItems.append("-------------------------------------" + "\n");
                    txtAreaItems.setLineWrap(true);

                    File cartFile = new File(projectDir + "//db_txtfiles//CartItem.txt");
                    if (!cartFile.exists()) {
                        cartFile.createNewFile();

                    }

                    FileWriter fw = new FileWriter(cartFile, true);
                    BufferedWriter bw = new BufferedWriter(fw);
                    bw.write(itemDetails[0] + ":" + itemDetails[1] + ":" + itemDetails[2] + ":" + qty + "\n");
                    bw.close();

                }
            }
            br.close();
        } catch (Exception ex) {

        }

    }

    //This method will be initiated when slot 10 is picked
    private void itemSlot10() {

        //This is to disable some of the items 
        disableItems();
        try {

            //This sets the project direcotry for the stock file
            projectDir = System.getProperty("user.dir");
            File stockFile = new File(projectDir + "//db_txtfiles//StockItem.txt");

            //This is to read the file in order to get the details from the text file
            FileReader fr = new FileReader(stockFile);
            BufferedReader br = new BufferedReader(fr);

            //This sets a temporary array
            String[] itemDetails;
            String itemRecord;
            int qty = 1;
            while ((itemRecord = br.readLine()) != null) {
                // This splits the details by using the colon and store in an array.

                itemDetails = itemRecord.split(":");

                if ("04".equals(itemDetails[0])) {
                    //This sets the price in the textfield
                    txtTotalPrice.setText("RM " + itemDetails[2]);
                    //This sets the information about the purchase in the text area
                    txtAreaItems.setFont(txtAreaItems.getFont().deriveFont(Font.BOLD, txtAreaItems.getFont().getSize()));
                    txtAreaItems.append("                    The Vending Machine" + "\n");
                    txtAreaItems.append("                                                   " + "\n");
                    txtAreaItems.append("--------------------------------------" + "\n");
                    txtAreaItems.append(" Item Code         Item Name         Item Price " + "\n");
                    txtAreaItems.append("--------------------------------------" + "\n");
                    txtAreaItems.append("                                                   " + "\n");
                    txtAreaItems.append("                                                   " + "\n");
                    txtAreaItems.append("   " + itemDetails[0] + "                    " + itemDetails[1] + "             " + "RM " + itemDetails[2] + "   x 1");
                    txtAreaItems.append("                                                   " + "\n");
                    txtAreaItems.append("                                                   " + "\n");
                    txtAreaItems.append("                                                   " + "\n");
                    txtAreaItems.append("-------------------------------------" + "\n");
                    txtAreaItems.setLineWrap(true);

                    File cartFile = new File(projectDir + "//db_txtfiles//CartItem.txt");
                    if (!cartFile.exists()) {
                        cartFile.createNewFile();

                    }

                    FileWriter fw = new FileWriter(cartFile, true);
                    BufferedWriter bw = new BufferedWriter(fw);
                    bw.write(itemDetails[0] + ":" + itemDetails[1] + ":" + itemDetails[2] + ":" + qty + "\n");
                    bw.close();

                }

            }
            br.close();
        } catch (Exception ex) {

        }

    }

    //This will validate all textfields before the purchasing
    private void validateInput() {

        if ("".equals(txtAreaItems.getText())) {
            JOptionPane.showMessageDialog(null, "Please select an item to proceed with the purchasing!", "Item not selected!", JOptionPane.WARNING_MESSAGE);

        } else if ("".equals(txtMoneyInserted.getText())) {
            JOptionPane.showMessageDialog(null, "Please input a valid money to proceed with the purchasing!", "Money not inserted!", JOptionPane.WARNING_MESSAGE);

        }

    }

    // This is a new exception class
    public void emptyInputFields() throws Exception {

        if ("".equals(txtAreaItems.getText())) {
            throw new Exception("Empty staff username");
        }
        if ("".equals(String.valueOf(txtMoneyInserted.getText()))) {
            throw new Exception("Empty staff password");
        }

    }

    //This will update the payment when the button is clicked
    public void incrementMoney(double btnInsertedValue) {
        enteredMoney = enteredMoney + btnInsertedValue;
        String payment = cashFormat.format(enteredMoney);
        txtMoneyInserted.setText("RM " + payment);
    }

    //This will set the money textfields as empty
    public void resetMoneyEntered() {
        enteredMoney -= enteredMoney;
        String payment = cashFormat.format(enteredMoney);
        txtMoneyInserted.setText(payment);
        txtMoneyInserted.setText("");

        changeMoney = enteredMoney - enteredMoney;
        String change = cashFormat.format(changeMoney);
        txtChange.setText(change);
        txtChange.setText("");
    }
    
    

    //This method is to do the purchasing process
    private void purchaseProcess() {

        try {
            //This throws the exception      
            emptyInputFields();

            //This is to  get the total price for the item and the money entered
            String price = txtTotalPrice.getText().substring(3);
            double totalPrice = Double.parseDouble(price);
            String insertedMoney = txtMoneyInserted.getText().substring(3);
            double moneyInserted = Double.parseDouble(insertedMoney);

            //This is to check whether the money inserted more than the price of the item
            if (moneyInserted >= totalPrice) {//if yes it will start the purchasing process
                //This variable will store the changed money
                changeMoney = moneyInserted - totalPrice;
                //This is to set the format for the variable
                String changetext = cashFormat.format(changeMoney);
                //This is to set the text field with the changed money
                txtChange.setText("RM " + changetext);

                //This sets the project directory
                projectDir = System.getProperty("user.dir");
                //This gets the stock item text file into file object
                File stockFile = new File(projectDir + "//db_txtfiles//StockItem.txt");
                //This gets the stock item text file into file object
                File cartFile = new File(projectDir + "//db_txtfiles//CartItem.txt");
                FileReader fr = new FileReader(cartFile);
                BufferedReader br = new BufferedReader(fr);
                String cartItems;

                while ((cartItems = br.readLine()) != null) {
                    //This is to split the details by line using the colon
                    String[] details = cartItems.split(":");
                    //This is to store the data from the text file inside a temporary array
                    String itemcode = details[0];
                    String itemName = details[1];
                    String itemPrice = details[2];
                    String itemQty = details[3];

                    //This is to store the new item quantity after the purchasing is successful
                    int newQty;

                    //This array list is to store stock items temporary before writing in the text file
                    ArrayList<String> itemArray = new ArrayList<>();

                    //This is to read the stock item file
                    try ( FileReader stockRead = new FileReader(stockFile)) {

                        Scanner readFile = new Scanner(stockRead);
                        String detailLine;
                        String[] detailArr;  //This temp array is to store the details which is gonna be updated                                     
                        while ((detailLine = readFile.nextLine()) != null) {
                            //This is to split each line using colon to check if the item code is present
                            detailArr = detailLine.split(":");
                            //If the code is present, add the old data
                            //Add the new data in the temporary array  

                            //If the item code match with the stock item it will remove the item quantity and complete the purchasing  process
                            if (detailArr[0].equals(itemcode)) {

                                //This will reduce the quantity in the current stock
                                newQty = Integer.parseInt(detailArr[3]) - Integer.parseInt(itemQty);

                                if (newQty > 0 && newQty <= 25) {
                                    //This is to get the item image inside the message box
                                    ImageIcon itemPurchase = new ImageIcon(projectDir + "//ItemImg//" + detailArr[4]);

                                    //This will write the new data inside the text file
                                    itemArray.add(detailArr[0] + ":"
                                            + detailArr[1] + ":"
                                            + detailArr[2] + ":"
                                            + newQty + ":"
                                            + detailArr[4]);

                                    if (changeMoney == 0) {

                                        JOptionPane.showMessageDialog(null, "Your item purchase is successful. Please take your item below!", "Item processing!", JOptionPane.INFORMATION_MESSAGE, itemPurchase);

                                    } else {

                                        JOptionPane.showMessageDialog(null, "Your item purchase is successful. Please take your item and your change of " + txtChange.getText() + " below! ", "Item processing!", JOptionPane.INFORMATION_MESSAGE, itemPurchase);
                                    }

                                } else if (newQty == 0) {
                                    //This is to get the item image inside the message box
                                    ImageIcon itemPurchase = new ImageIcon(projectDir + "//ItemImg//" + detailArr[4]);
                                    if (changeMoney == 0) {

                                        JOptionPane.showMessageDialog(null, "Your item purchase is successful. Please take your item below!", "Item processing!", JOptionPane.INFORMATION_MESSAGE, itemPurchase);

                                    } else {

                                        JOptionPane.showMessageDialog(null, "Your item purchase is successful. Please take your item and your change of " + txtChange.getText() + " below! ", "Item processing!", JOptionPane.INFORMATION_MESSAGE, itemPurchase);
                                    }

                                    //This sets the project directory of the image folder
                                    String imageDir = System.getProperty("user.dir");
                                    String imgFolder = imageDir + "//ItemImg//";
                                    //This gets the item image path of the item code stored in the array
                                    Path itemImgPath = Paths.get(imgFolder + detailArr[4]);
                                    //This will delete the image according to the item code
                                    try {
                                        Files.delete(itemImgPath);
                                    } catch (IOException e) {

                                        e.printStackTrace();
                                    }
                                    //This will set the item slot as "*" which indicates that the slot is empty
                                    itemArray.add(detailArr[0] + ":"
                                            + "*" + ":"
                                            + "*" + ":"
                                            + "*" + ":"
                                            + "*");

                                }

                            } else {
                                //search other item code doesnt match and add the line
                                itemArray.add(detailLine);
                            }

                        }

                        stockRead.close();
                    } catch (Exception e) {

                    }
                    try {
                        //This is to set the bufferd write to write the data into temporary array again back to text file        
                        try ( PrintWriter pw = new PrintWriter(stockFile)) {
                            for (String str : itemArray) {
                                pw.println(str); //This will write all the data in the temporary array back to the file line by line                                 
                            }
                            //This is to close the print writer
                            pw.close();
                            //This is to show all button again after a purchasing process
                            enableItems();
                            //This is get the item details when the purchase is succesfull
                            getItemDetails();

                            //This is to store purchasing detaisl
                            storePurchaseHistory();
                        } catch (IOException ex) {
                            Logger.getLogger(MainVMFram.class.getName()).log(Level.SEVERE, null, ex);
                            JOptionPane.showMessageDialog(null, "Purchase is not successful!", "Try again!", JOptionPane.ERROR_MESSAGE);
                        }

                    } catch (Exception e) {

                    }
                }
                //This is to close the buffered reader
                br.close();

            } else { //if the money entered is not sufficient, then it will trigger this error message
                JOptionPane.showMessageDialog(null, "The entered Money is not enough to buy the item.", "Not sufficient!", JOptionPane.ERROR_MESSAGE);
            }

        } catch (Exception e) {
            //This is to validate the text field input
            validateInput();
        }

    }

    //This method is for storing the purchase details 
    private void storePurchaseHistory() {
        //This sets the projects folder directory
        projectDir = System.getProperty("user.dir");
        try {

            File cartItem = new File(projectDir + "//db_txtfiles//CartItem.txt");
            FileReader fr = new FileReader(cartItem);
            BufferedReader br = new BufferedReader(fr);
            String purchaseRecord;

            while ((purchaseRecord = br.readLine()) != null) { //Retrieving All Data itemlist.txt File.
                String[] details = purchaseRecord.split(":");
                String itemcode = details[0];
                String itemName = details[1];
                String itemPrice = details[2];
                String itemQty = details[3];

                try {
                    purchaseID = deciFormat.format(newPurchaseID);
                    String purchaseItemCode = itemcode;
                    String purchaseItemName = itemName;
                    String purchaseItemPrice = itemPrice;
                    String purchaseItemQty = itemQty;
                    String purchaseDate = txtDateDisplay.getText();
                    String purchaseTime = txtTimeDisplay.getText();
                    br.close();

                    //File salesFile = new File(projectDir + "//db_txtfiles//SalesReport.txt");         
                    FileWriter fw = new FileWriter(projectDir + "//db_txtfiles//SalesReport.txt", true);
                    BufferedWriter bw = new BufferedWriter(fw);
                    bw.write(prefixID + purchaseID + ":" + purchaseItemCode + ":" + purchaseItemName + ":" + purchaseItemPrice + ":" + purchaseItemQty + ":" + purchaseDate + ":" + purchaseTime + "\n");
                    bw.close();
                    purchaseIDIncrementor();
                } catch (FileNotFoundException ex) {

                    Logger.getLogger(MainVMFram.class.getName()).log(Level.SEVERE, null, ex);

                } catch (IOException ex) {

                    Logger.getLogger(MainVMFram.class.getName()).log(Level.SEVERE, null, ex);

                }

                cartItem.delete();
            }

        } catch (IOException e) {

        }

    }

    //This method increments everytime when a transction happened
    private void purchaseIDIncrementor() {
        boolean hasPurchaseIDRecord = false;
        // This array is to store all lines
        String[] purchaseDetails = null;
        try {
            // This sets the directory of the project
            projectDir = System.getProperty("user.dir") + "//db_txtFiles//";
            File salesFile = new File(projectDir + "SalesReport.txt");
            if (!salesFile.exists()) {
                salesFile.createNewFile();
            }
            Scanner readFile;
            try {
                // Read lines from the file until no more are left.
                readFile = new Scanner(salesFile);
                while (readFile.hasNext()) {
                    // Read the next line.
                    String nextPurchase = readFile.nextLine();
                    // Split the line by using the colon ":" and store into  an array.
                    purchaseDetails = nextPurchase.split(":");
                    purchaseDetails[0] = purchaseDetails[0].replace("PID", "");
                    hasPurchaseIDRecord = true;
                }
                readFile.close();
                if (!hasPurchaseIDRecord) {
                    JOptionPane.showMessageDialog(null, "The system does not find any purchase details inside the text file", "Purchase Record is empty!", JOptionPane.ERROR_MESSAGE);
                    newPurchaseID = 1;
                } else {
                    newPurchaseID = Integer.parseInt(purchaseDetails[0]) + 1;
                }

            } catch (FileNotFoundException ex) {
                Logger.getLogger(MainVMFram.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }

    
    //This is display while the stat executing the jframe
    public void init() {
        txtAreaItems.setEditable(false);
        txtTotalPrice.setEditable(false);
        txtMoneyInserted.setEditable(false);
        txtChange.setEditable(false);
        txtChange.setBorder(BorderFactory.createCompoundBorder(txtTotalPrice.getBorder(), BorderFactory.createEmptyBorder(5, 5, 5, 4)));
        txtTotalPrice.setBorder(BorderFactory.createCompoundBorder(txtTotalPrice.getBorder(), BorderFactory.createEmptyBorder(5, 5, 5, 4)));
        txtMoneyInserted.setBorder(BorderFactory.createCompoundBorder(txtMoneyInserted.getBorder(), BorderFactory.createEmptyBorder(5, 5, 5, 4)));

        //This shows the current date
        showDate();

        //This shows the current time
        showTime();

        //This sets background color for Label
        lblbackgroundColor();

        //This sets image icon
        getImgIcon();

        //This gets the available item for vending machine
        //getItemSlot();
        getItemDetails();

        //This is to increment the purchase ID
        purchaseIDIncrementor();

        //This is to handle the window closing event
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                int selection = JOptionPane.showConfirmDialog(null, "Want to exit?", "Closing Vending Machine", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (selection == JOptionPane.YES_OPTION) {
                    setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                } else {
                    setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
                }
            }
        });

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn10sen;
    private javax.swing.JButton btn20sen;
    private javax.swing.JButton btn50sen;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnPay;
    private javax.swing.JButton btnRM1;
    private javax.swing.JButton btnRM10;
    private javax.swing.JButton btnRM5;
    private javax.swing.JButton btnResetPayment;
    private javax.swing.JButton btnSlot1;
    private javax.swing.JButton btnSlot10;
    private javax.swing.JButton btnSlot2;
    private javax.swing.JButton btnSlot3;
    private javax.swing.JButton btnSlot4;
    private javax.swing.JButton btnSlot5;
    private javax.swing.JButton btnSlot6;
    private javax.swing.JButton btnSlot7;
    private javax.swing.JButton btnSlot8;
    private javax.swing.JButton btnSlot9;
    private javax.swing.JButton btnVerify;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JLabel lbl1;
    private javax.swing.JLabel lbl10;
    private javax.swing.JLabel lbl2;
    private javax.swing.JLabel lbl3;
    private javax.swing.JLabel lbl4;
    private javax.swing.JLabel lbl5;
    private javax.swing.JLabel lbl6;
    private javax.swing.JLabel lbl7;
    private javax.swing.JLabel lbl8;
    private javax.swing.JLabel lbl9;
    private javax.swing.JLabel lblChange;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblInsertMoney;
    private javax.swing.JLabel lblItem1;
    private javax.swing.JLabel lblItem10;
    private javax.swing.JLabel lblItem2;
    private javax.swing.JLabel lblItem3;
    private javax.swing.JLabel lblItem4;
    private javax.swing.JLabel lblItem5;
    private javax.swing.JLabel lblItem6;
    private javax.swing.JLabel lblItem7;
    private javax.swing.JLabel lblItem8;
    private javax.swing.JLabel lblItem9;
    private javax.swing.JLabel lblMoneyInserted;
    private javax.swing.JLabel lblSelectItems;
    private javax.swing.JLabel lblSelectItems2;
    private javax.swing.JLabel lblSlot1;
    private javax.swing.JLabel lblSlot10;
    private javax.swing.JLabel lblSlot2;
    private javax.swing.JLabel lblSlot3;
    private javax.swing.JLabel lblSlot4;
    private javax.swing.JLabel lblSlot5;
    private javax.swing.JLabel lblSlot6;
    private javax.swing.JLabel lblSlot7;
    private javax.swing.JLabel lblSlot8;
    private javax.swing.JLabel lblSlot9;
    private javax.swing.JLabel lblStock1;
    private javax.swing.JLabel lblStock10;
    private javax.swing.JLabel lblStock2;
    private javax.swing.JLabel lblStock3;
    private javax.swing.JLabel lblStock4;
    private javax.swing.JLabel lblStock5;
    private javax.swing.JLabel lblStock6;
    private javax.swing.JLabel lblStock7;
    private javax.swing.JLabel lblStock8;
    private javax.swing.JLabel lblStock9;
    private javax.swing.JLabel lblTime;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblTotalPrice;
    private javax.swing.JTextArea txtAreaItems;
    private javax.swing.JTextField txtChange;
    private javax.swing.JTextPane txtDateDisplay;
    private javax.swing.JTextField txtMoneyInserted;
    private javax.swing.JTextPane txtTimeDisplay;
    private javax.swing.JTextField txtTotalPrice;
    // End of variables declaration//GEN-END:variables

}
