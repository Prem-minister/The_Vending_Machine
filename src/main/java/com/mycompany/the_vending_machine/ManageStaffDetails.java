/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.the_vending_machine;

import java.awt.Color;
import java.awt.event.*;
import java.io.*;
import java.util.*;
import java.util.logging.*;
import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.table.*;

/**
 *
 * /**
 *
 * @author premsharaan
 */
public class ManageStaffDetails extends javax.swing.JFrame {

    //Set variable for later usage
    private String StaffID, projectDir;
    //This variable will be used to scan the text file for deleting staff details process
    private static Scanner scan;

    /**
     * Creates new form ManageStaffDetails
     */
    public ManageStaffDetails() {
        initComponents();
        initGUI();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFormattedTextField1 = new javax.swing.JFormattedTextField();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        lblUsername = new javax.swing.JLabel();
        txtNewUsername = new javax.swing.JTextField();
        lblPassword = new javax.swing.JLabel();
        txtPassword = new javax.swing.JPasswordField();
        lblRetypePassword = new javax.swing.JLabel();
        txtRetypePassword = new javax.swing.JPasswordField();
        lblName = new javax.swing.JLabel();
        txtFullName = new javax.swing.JTextField();
        lblGender = new javax.swing.JLabel();
        cbxGender = new javax.swing.JComboBox<>();
        lblEmail = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        lblNumber = new javax.swing.JLabel();
        txtNumber = new javax.swing.JFormattedTextField();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnSearch = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblStaff = new javax.swing.JTable();
        btnMainMenu = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        lblnote = new javax.swing.JLabel();

        jFormattedTextField1.setText("jFormattedTextField1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Manage Staff Details");

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setForeground(new java.awt.Color(255, 255, 255));
        jPanel2.setMinimumSize(new java.awt.Dimension(1440, 900));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setBackground(new java.awt.Color(51, 51, 51));
        jLabel1.setFont(new java.awt.Font("Avenir Next", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 0, 0));
        jLabel1.setText("Manage Staff Details");
        jPanel2.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(38, 31, 420, 47));

        jSeparator1.setForeground(new java.awt.Color(102, 102, 102));
        jPanel2.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(38, 96, 1363, 10));

        lblUsername.setFont(new java.awt.Font("Corsiva Hebrew", 0, 18)); // NOI18N
        lblUsername.setForeground(new java.awt.Color(102, 0, 0));
        lblUsername.setText("Username :");
        jPanel2.add(lblUsername, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 240, -1, 28));

        txtNewUsername.setBackground(new java.awt.Color(255, 255, 255));
        txtNewUsername.setFont(new java.awt.Font("Avenir Next", 0, 15)); // NOI18N
        txtNewUsername.setForeground(new java.awt.Color(51, 51, 51));
        txtNewUsername.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51), 2));
        txtNewUsername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNewUsernameActionPerformed(evt);
            }
        });
        jPanel2.add(txtNewUsername, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 240, 262, 37));

        lblPassword.setFont(new java.awt.Font("Corsiva Hebrew", 0, 18)); // NOI18N
        lblPassword.setForeground(new java.awt.Color(102, 0, 0));
        lblPassword.setText("Password :");
        jPanel2.add(lblPassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 300, -1, 28));

        txtPassword.setBackground(new java.awt.Color(255, 255, 255));
        txtPassword.setFont(new java.awt.Font("Avenir Next", 0, 15)); // NOI18N
        txtPassword.setForeground(new java.awt.Color(51, 51, 51));
        txtPassword.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51), 2));
        jPanel2.add(txtPassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 290, 262, 37));

        lblRetypePassword.setFont(new java.awt.Font("Corsiva Hebrew", 0, 18)); // NOI18N
        lblRetypePassword.setForeground(new java.awt.Color(102, 0, 0));
        lblRetypePassword.setText("Retype Password :");
        jPanel2.add(lblRetypePassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 360, -1, 28));

        txtRetypePassword.setBackground(new java.awt.Color(255, 255, 255));
        txtRetypePassword.setFont(new java.awt.Font("Avenir Next", 0, 15)); // NOI18N
        txtRetypePassword.setForeground(new java.awt.Color(51, 51, 51));
        txtRetypePassword.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51), 2));
        jPanel2.add(txtRetypePassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 350, 262, 37));

        lblName.setFont(new java.awt.Font("Corsiva Hebrew", 0, 18)); // NOI18N
        lblName.setForeground(new java.awt.Color(102, 0, 0));
        lblName.setText("Full Name : ");
        jPanel2.add(lblName, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 430, 105, 28));

        txtFullName.setBackground(new java.awt.Color(255, 255, 255));
        txtFullName.setFont(new java.awt.Font("Avenir Next", 0, 15)); // NOI18N
        txtFullName.setForeground(new java.awt.Color(51, 51, 51));
        txtFullName.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51), 2));
        txtFullName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFullNameActionPerformed(evt);
            }
        });
        jPanel2.add(txtFullName, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 420, 262, 37));

        lblGender.setFont(new java.awt.Font("Corsiva Hebrew", 0, 18)); // NOI18N
        lblGender.setForeground(new java.awt.Color(102, 0, 0));
        lblGender.setText("Gender :");
        jPanel2.add(lblGender, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 490, 84, 28));

        cbxGender.setBackground(new java.awt.Color(255, 255, 255));
        cbxGender.setFont(new java.awt.Font("Avenir Next", 0, 15)); // NOI18N
        cbxGender.setForeground(new java.awt.Color(0, 0, 0));
        cbxGender.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "----", "Male", "Female" }));
        cbxGender.setBorder(null);
        cbxGender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxGenderActionPerformed(evt);
            }
        });
        jPanel2.add(cbxGender, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 480, 164, 37));

        lblEmail.setFont(new java.awt.Font("Corsiva Hebrew", 0, 18)); // NOI18N
        lblEmail.setForeground(new java.awt.Color(102, 0, 0));
        lblEmail.setText("Email :");
        jPanel2.add(lblEmail, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 550, 84, 28));

        txtEmail.setBackground(new java.awt.Color(255, 255, 255));
        txtEmail.setFont(new java.awt.Font("Avenir Next", 0, 15)); // NOI18N
        txtEmail.setForeground(new java.awt.Color(51, 51, 51));
        txtEmail.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51), 2));
        txtEmail.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtEmailFocusLost(evt);
            }
        });
        txtEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEmailActionPerformed(evt);
            }
        });
        jPanel2.add(txtEmail, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 540, 262, 37));

        lblNumber.setFont(new java.awt.Font("Corsiva Hebrew", 0, 18)); // NOI18N
        lblNumber.setForeground(new java.awt.Color(102, 0, 0));
        lblNumber.setText("Phone Number :");
        jPanel2.add(lblNumber, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 610, 145, 28));

        txtNumber.setBackground(new java.awt.Color(255, 255, 255));
        txtNumber.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51), 2));
        txtNumber.setForeground(new java.awt.Color(0, 0, 0));
        try {
            txtNumber.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###-#######")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtNumber.setToolTipText("");
        txtNumber.setFont(new java.awt.Font("Avenir Next", 0, 15)); // NOI18N
        jPanel2.add(txtNumber, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 610, 262, 37));

        btnUpdate.setBackground(new java.awt.Color(153, 0, 0));
        btnUpdate.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        btnUpdate.setForeground(new java.awt.Color(255, 255, 255));
        btnUpdate.setText("Update");
        btnUpdate.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        jPanel2.add(btnUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 710, 103, 36));

        btnDelete.setBackground(new java.awt.Color(153, 0, 0));
        btnDelete.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        btnDelete.setForeground(new java.awt.Color(255, 255, 255));
        btnDelete.setText("Delete");
        btnDelete.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        jPanel2.add(btnDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 710, 103, 36));

        btnClear.setBackground(new java.awt.Color(153, 0, 0));
        btnClear.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        btnClear.setForeground(new java.awt.Color(255, 255, 255));
        btnClear.setText("Clear");
        btnClear.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });
        jPanel2.add(btnClear, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 710, 103, 36));

        btnSearch.setBackground(new java.awt.Color(153, 0, 0));
        btnSearch.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        btnSearch.setForeground(new java.awt.Color(255, 255, 255));
        btnSearch.setText("Search");
        btnSearch.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });
        jPanel2.add(btnSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 710, 103, 36));

        jScrollPane1.setBackground(new java.awt.Color(204, 204, 204));

        tblStaff.setBackground(new java.awt.Color(204, 204, 204));
        tblStaff.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        tblStaff.setForeground(new java.awt.Color(0, 0, 0));
        tblStaff.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Username", "Password", "Staff ID", "Full Name", "Gender", "Phone Number", "Email"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tblStaff.setToolTipText("");
        tblStaff.setSelectionBackground(new java.awt.Color(51, 0, 0));
        tblStaff.setSelectionForeground(new java.awt.Color(255, 204, 204));
        tblStaff.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblStaffMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblStaff);

        jPanel2.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 190, 790, 520));

        btnMainMenu.setBackground(new java.awt.Color(221, 218, 218));
        btnMainMenu.setFont(new java.awt.Font("Dialog", 1, 15)); // NOI18N
        btnMainMenu.setForeground(new java.awt.Color(0, 0, 0));
        btnMainMenu.setText("Main Menu");
        btnMainMenu.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnMainMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMainMenuActionPerformed(evt);
            }
        });
        jPanel2.add(btnMainMenu, new org.netbeans.lib.awtextra.AbsoluteConstraints(1280, 40, -1, 33));

        jSeparator2.setForeground(new java.awt.Color(153, 153, 153));
        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jPanel2.add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 200, 15, 550));

        lblnote.setBackground(new java.awt.Color(51, 51, 51));
        lblnote.setFont(new java.awt.Font(".SF NS Text", 1, 13)); // NOI18N
        lblnote.setForeground(new java.awt.Color(51, 51, 51));
        lblnote.setText("Please Note: Fill up all the details in order to register the staff ");
        jPanel2.add(lblnote, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 120, -1, -1));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 900, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtNewUsernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNewUsernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNewUsernameActionPerformed

    private void txtFullNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFullNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFullNameActionPerformed

    private void cbxGenderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxGenderActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbxGenderActionPerformed

    private void txtEmailFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtEmailFocusLost
        StaffEmailValidation invalidate = new StaffEmailValidation();
        invalidate.runValidate(txtEmail, true);
    }//GEN-LAST:event_txtEmailFocusLost

    private void txtEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEmailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEmailActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        clearManageDetails();

    }//GEN-LAST:event_btnClearActionPerformed

    private void btnMainMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMainMenuActionPerformed
        int selection = JOptionPane.showConfirmDialog(null, "Going back to main menu will cancel the ongoing staff details modification process. Continue?", "Returning to Main Menu!", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (selection == JOptionPane.YES_OPTION) {
            this.dispose();
            new StaffMainMenu().setVisible(true);
        }
    }//GEN-LAST:event_btnMainMenuActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        searchStaff(txtNewUsername.getText());
    }//GEN-LAST:event_btnSearchActionPerformed

    private void tblStaffMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblStaffMouseClicked
        selectRowTable();
    }//GEN-LAST:event_tblStaffMouseClicked

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        updateStaff();
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
     
        if ("".equals(txtNewUsername.getText()) || "".equals(txtFullName.getText())) {
            JOptionPane.showMessageDialog(null, "Search the staff's username to proceed.", "Invalid insertion detected!", JOptionPane.WARNING_MESSAGE);

        } else {

            int selection = JOptionPane.showConfirmDialog(null, "Are you sure want to delete the staff account?", "Deleting staff!", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (selection == JOptionPane.YES_OPTION) {
                deleteStaff(txtNewUsername.getText(), txtPassword.getText(), txtRetypePassword.getText(), txtFullName.getText(), (String) cbxGender.getSelectedItem(), txtNumber.getText(), txtEmail.getText());
            }

        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManageStaffDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManageStaffDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManageStaffDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManageStaffDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //This sets the frame customization
                  ManageStaffDetails frame = new ManageStaffDetails();
                  frame.setVisible(true);
                  frame.setResizable(false);
            }
        });
    }

    
    //This gets the staff details in the table
    private void getStaffDetails() {
        projectDir = System.getProperty("user.dir") + "//db_txtFiles//";
        File staffDetails = new File(projectDir + "AdminVerify.txt");
        try {
            FileReader fr = new FileReader(staffDetails);
            BufferedReader br = new BufferedReader(fr);
            //This sets the table into a table model
            DefaultTableModel model = (DefaultTableModel) tblStaff.getModel();

            //This is to  get line  by line from the text file
            Object[] tableLines = br.lines().toArray();
            //This is to retrieve the content from the lines in the text file and set the content in to the jtable
            for (int i = 0; i < tableLines.length; i++) {
                String detailsline = tableLines[i].toString().trim();
                String[] staffDataRow = detailsline.split(":");
                model.addRow(staffDataRow);
            }
        } catch (Exception ex) {
            Logger.getLogger(ManageStaffDetails.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    
    //This method retrieves the details from the jtabel and set it inside the respective fields when the user cell click.
    private void selectRowTable() {
        enableFields();
        int index = tblStaff.getSelectedRow();

        TableModel model = tblStaff.getModel();
        String username = model.getValueAt(index, 0).toString();
        String password = model.getValueAt(index, 1).toString();
        String staffid = model.getValueAt(index, 2).toString();
        String fullName = model.getValueAt(index, 3).toString();
        String gender = model.getValueAt(index, 4).toString();
        String number = model.getValueAt(index, 5).toString();
        String email = model.getValueAt(index, 6).toString();

        txtNewUsername.setText(username);
        txtPassword.setText(password);
        txtRetypePassword.setText(password);
        StaffID = staffid;
        txtFullName.setText(fullName);
        cbxGender.setSelectedItem(gender);
        txtNumber.setText(number);
        txtEmail.setText(email);
    }

    // This method is to delete a temporary staff session that has been created during verification
    private void clearStaffSession() {
        try {
            // This sets the directory of the project
            projectDir = System.getProperty("user.dir") + "//db_txtFiles//";
            File staffCache = new File(projectDir + "StaffCache.txt");
            if (staffCache.exists()) {
                staffCache.delete();
            }
        } catch (Exception ex) {

        }
    }

    // This is exception class for empty fields 
    private void emptyInputFields() throws Exception {
        StaffEmailValidation invalidate = new StaffEmailValidation();
        if ("".equals(txtNewUsername.getText())) {
            throw new Exception("Empty staff username");
        }
        if ("".equals(String.valueOf(txtPassword.getPassword()))) {
            throw new Exception("Empty staff password");
        }
        if ("".equals(String.valueOf(txtRetypePassword.getPassword()))) {
            throw new Exception("Empty staff retype password");
        }
        if ("".equals(txtFullName.getText())) {
            throw new Exception("Empty staff full name");
        }
        if ("".equals(txtNumber.getText())) {
            throw new Exception("Empty staff phone number");
        }
        if ("".equals(txtEmail.getText())) {
            throw new Exception("Empty staff email");
        }

        if (invalidate.runValidate(txtEmail, false)) {
            throw new Exception("Invalid staff email address format");
        }
    }

    // This method handles all validation related to the fields
    private void staffInputCharacterValidator() {
            txtNewUsername.getDocument().addDocumentListener(new VenStaffDocumentListener() {
            StaffUsernameValidation invalidate = new StaffUsernameValidation();

            @Override
            public void changedUpdate(DocumentEvent e) {
                invalidate.runValidate(txtNewUsername);
                invalidate.setRegex("testing");
                invalidate.getRegex();
            }

            @Override
            public void insertUpdate(DocumentEvent e) {
                invalidate.runValidate(txtNewUsername);
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                invalidate.runValidate(txtNewUsername);
            }

        });
        txtPassword.getDocument().addDocumentListener(new VenStaffDocumentListener() {
            StaffPasswordValidation invalidate = new StaffPasswordValidation();

            @Override
            public void changedUpdate(DocumentEvent e) {
                invalidate.runValidate(txtPassword);
            }

            @Override
            public void insertUpdate(DocumentEvent e) {
                invalidate.runValidate(txtPassword);
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                invalidate.runValidate(txtPassword);
            }
        });
            txtRetypePassword.getDocument().addDocumentListener(new VenStaffDocumentListener() {
            StaffPasswordValidation invalidate = new StaffPasswordValidation();

            @Override
            public void changedUpdate(DocumentEvent e) {
                invalidate.runValidate(txtRetypePassword);
            }

            @Override
            public void insertUpdate(DocumentEvent e) {
                invalidate.runValidate(txtRetypePassword);
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                invalidate.runValidate(txtRetypePassword);
            }
        });
        txtFullName.getDocument().addDocumentListener(new VenStaffDocumentListener() {
            StaffFullNameValidation invalidate = new StaffFullNameValidation();

            @Override
            public void changedUpdate(DocumentEvent e) {
                invalidate.runValidate(txtFullName);
            }

            @Override
            public void insertUpdate(DocumentEvent e) {
                invalidate.runValidate(txtFullName);
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                invalidate.runValidate(txtFullName);
            }
        });
    }

    //This method raise message for empty fields, password comparison and username validation.
    private void validateInput() {
        if ("".equals(txtNewUsername.getText()) && "".equals(txtFullName.getText()) && "".equals(txtNumber.getText()) && "".equals(txtEmail.getText())) {
            JOptionPane.showMessageDialog(null, "Search the staff's username to proceed.", "Invalid insertion detected!", JOptionPane.WARNING_MESSAGE);
        } else if ("".equals(txtNewUsername.getText())) {
            JOptionPane.showMessageDialog(null, "Search the staff's username to proceed.", "Invalid insertion detected!", JOptionPane.WARNING_MESSAGE);
        } else if ("".equals(String.valueOf(txtPassword.getPassword()))) {
            JOptionPane.showMessageDialog(null, "Invalid input! Pleass input password to proceed.", "Invalid insertion detected!", JOptionPane.WARNING_MESSAGE);
        } else if ("".equals(String.valueOf(txtRetypePassword.getPassword()))) {
            JOptionPane.showMessageDialog(null, "Invalid input! Pleass input retype password to proceed.", "Invalid insertion detected!", JOptionPane.WARNING_MESSAGE);
        } else if ("".equals(txtFullName.getText())) {
            JOptionPane.showMessageDialog(null, "Invalid input! Pleass input full name to proceed.", "Invalid insertion detected!", JOptionPane.WARNING_MESSAGE);
        } else if (cbxGender.getSelectedIndex() <= 0) {
            JOptionPane.showMessageDialog(null, "Gender is not selected!", "Gender unselected!", JOptionPane.WARNING_MESSAGE);
        } else if ("   -       ".equals(txtNumber.getText())) {
            JOptionPane.showMessageDialog(null, "Invalid input! Please input phone number to proceed.", "Invalid insertion detected!", JOptionPane.WARNING_MESSAGE);
        } else if ("".equals(txtEmail.getText())) {
            JOptionPane.showMessageDialog(null, "Invalid input! Please input email to proceed.", "Invalid insertion detected!", JOptionPane.WARNING_MESSAGE);
        } else if (!comparePassword()) {
            JOptionPane.showMessageDialog(null, "Password is not same!", "Password mismatch!", JOptionPane.WARNING_MESSAGE);
        } else if (usernameValidation(txtNewUsername.getText())) {
            JOptionPane.showMessageDialog(null, "Username is already taken by another staff! Use a different Username to proceed.", "Username is in use!", JOptionPane.ERROR_MESSAGE);

        }
    }

    // This method clears all the fields
    private void clearManageDetails() {
        txtNewUsername.setText("");
        txtPassword.setText("");
        txtRetypePassword.setText("");
        StaffID = "";
        txtFullName.setText("");
        cbxGender.setSelectedIndex(0);
        txtNumber.setText("");
        txtEmail.setText("");
        disableFields();
    }

    //This boolean method will check whether the username has been chosen by other staffs or not
    private boolean usernameValidation(String staffUsername) {
        String staffID = StaffID;
        boolean notFound = false;
        // This array is to store all lines
        String[] staffDetails;
        try {
            // This sets the directory of the project
            projectDir = System.getProperty("user.dir") + "//db_txtFiles//";
            // This sets the file which going to be accessed
            File staffFile = new File(projectDir + "AdminVerify.txt");
            if (!staffFile.exists()) {
                staffFile.createNewFile();
            }
            Scanner searchUsername = new Scanner(staffFile);
            // Read till last line of file
            while (searchUsername.hasNext()) {
                // Read the next line.
                String inputUsername = searchUsername.nextLine();
                // Split the details by using the colon and store in an array.
                staffDetails = inputUsername.split(":");
                if (!staffDetails[2].equals(staffID) && staffUsername.equals(staffDetails[0])) {
                    notFound = true;
                }

            }
            searchUsername.close();
        } catch (Exception ex) {

        }
        return notFound;
    }

    //This method is to search details using username
    private void searchStaff(String staffUsername) {
        boolean hasRecord = false;
        String[] staffDetails;   // This array is to store all lines
        try {
            // This sets the directory of the project
            projectDir = System.getProperty("user.dir") + "//db_txtFiles//";
            // This sets the file which going to be accessed
            File staffFile = new File(projectDir + "AdminVerify.txt");
            if (!staffFile.exists()) {
                staffFile.createNewFile();
            }

            Scanner searchUsername = new Scanner(staffFile);
            // Read till last line of file
            while (searchUsername.hasNext()) {
                // Read the next line.
                String inputUsername = searchUsername.nextLine();
                // Split the details by using the colon and store in an array.
                staffDetails = inputUsername.split(":");
                if (staffUsername.equals(staffDetails[0])) {
                    txtPassword.setText(staffDetails[1]);
                    txtRetypePassword.setText(staffDetails[1]);
                    StaffID = staffDetails[2];
                    txtFullName.setText(staffDetails[3]);
                    cbxGender.setSelectedItem(staffDetails[4]);
                    txtNumber.setText(staffDetails[5]);
                    txtEmail.setText(staffDetails[6]);
                    hasRecord = true;
                    enableFields();
                }
            }
            searchUsername.close();
            if (!hasRecord) {
                //this will trigger an error message and clear all the text fields          
                JOptionPane.showMessageDialog(null, "Staff's username was not found.", "Username doesn't exists!", JOptionPane.ERROR_MESSAGE);
                this.clearManageDetails();

            }
        } catch (Exception ex) {

        }

    }

    //This method will update new staff details
    private void updateStaff() {

        //This sets the file directory
        projectDir = System.getProperty("user.dir") + "//db_txtFiles//";
        File file = new File(projectDir + "AdminVerify.txt");

        //This will get all details and set the details into a variable
        String username = txtNewUsername.getText();
        String password = txtPassword.getText();
        String fullname = txtFullName.getText();
        String gender = cbxGender.getSelectedItem().toString();
        String number = txtNumber.getText();
        String email = txtEmail.getText();
        String staffID = StaffID;

        ArrayList<String> staffArray = new ArrayList<>();  //This is for temporary array to hold the staff data
        try {
            try ( FileReader fr = new FileReader(file)) {
                Scanner readFile = new Scanner(fr);
                String detailLine;
                String[] detailArr;  //This temp array is to store the details which is gonna be updated                                     
                while ((detailLine = readFile.nextLine()) != null) {
                    //This is to split each line using colon to check if the username is present
                    detailArr = detailLine.split(":");
                    //If the username is present, add the old data
                    //Add the new data in the temporary array
                    if (detailArr[2].equals(staffID)) {
                        staffArray.add(username + ":"
                                + password + ":"
                                + detailArr[2] + ":"
                                + fullname + ":"
                                + gender + ":"
                                + number + ":"
                                + email);
                    } else {
                        //search other doesnt match and add the line
                        staffArray.add(detailLine);
                    }
                }
                fr.close();
            } catch (Exception e) {

            }
        } catch (Exception e) {

        }

        try {

            usernameValidation(txtNewUsername.getText());
            //This throws the exception  
            emptyInputFields();

            if (usernameValidation(txtNewUsername.getText())) {
                throw new Exception("Username is already in use by another staff.");
            } else if (!comparePassword()) {  // This compare the password and retype password
                throw new Exception("Password and retype password entered not same!");
            } else if (cbxGender.getSelectedIndex() <= 0) { // This is will be displayed when the combo box is selected default
                JOptionPane.showMessageDialog(null, "Gender not selected!", "Gender unselected!", JOptionPane.ERROR_MESSAGE);
            } else {

                boolean hasUpdated = false;
                //this is to set the bufferd write to write the data into temporary array again back to text file        
                try ( PrintWriter pw = new PrintWriter(file)) {
                    for (String str : staffArray) {
                        pw.println(str); //this will write all the data in the temporary array back to the file line by line
                        hasUpdated = true;
                    }
                    //This will display a success message indicates that the details has been updated
                    if (hasUpdated) {
                        JOptionPane.showMessageDialog(null, "Staff Details has been updated successfully!", "Account successfully updated!", JOptionPane.INFORMATION_MESSAGE);
                        pw.close();
                        clearManageDetails();
                        //this will refresh the table when it is successful
                        DefaultTableModel model = (DefaultTableModel) tblStaff.getModel();
                        model.setRowCount(0);
                        getStaffDetails();
                    }

                } catch (IOException ex) {
                    Logger.getLogger(ManageStaffDetails.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(null, "Staff Details has not been updated successfully!", "Error Occured!", JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (Exception e) {
            validateInput();
        }

    }

    //This method delete the staff details based on the staff ID 
    public void deleteStaff(String staffUsername, String staffPassword, String staffRPassword, String staffFullName, String staffGender, String staffNumber, String staffEmail) {
        //Getting the searched username's staff ID into a variable       
        String staffID = StaffID;

        //This sets the file directory of the project
        projectDir = System.getProperty("user.dir") + "//db_txtFiles//";
        File file = new File(projectDir + "AdminVerify.txt");
        String username = "";
        String password = "";
        String fullname = "";
        String gender = "";
        String number = "";
        String email = "";
        String emptyID = "";

        String tempFile = projectDir + "temp.txt";
        File newFile = new File(tempFile);
        try {
            
            FileWriter fw = new FileWriter(tempFile, true);
            BufferedWriter bw = new BufferedWriter(fw);
            PrintWriter pw = new PrintWriter(bw);
            scan = new Scanner(new File(projectDir + "AdminVerify.txt"));
            scan.useDelimiter("[:\n]");

            while (scan.hasNext()) {
                username = scan.next();
                password = scan.next();
                emptyID = scan.next();
                fullname = scan.next();
                gender = scan.next();
                number = scan.next();
                email = scan.next();

                if (!emptyID.equals((staffID))) {
                    pw.println(username + ":" + password + ":" + emptyID + ":" + fullname + ":" + gender + ":" + number + ":" + email);

                }

            }
            scan.close();
            pw.flush();
            pw.close();
            //This will delete the old file
            file.delete();
            //This renames the new file
            File rename = new File(projectDir + "AdminVerify.txt");
            newFile.renameTo(rename);

            clearManageDetails();
            DefaultTableModel model = (DefaultTableModel) tblStaff.getModel();
            model.setRowCount(0);
            getStaffDetails();
            JOptionPane.showMessageDialog(null, "Staff Details has been deleted successfully!", "Account successfully deleted!", JOptionPane.INFORMATION_MESSAGE);
            
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error! Staff has not been deleted", "Error Occured!", JOptionPane.ERROR_MESSAGE);
            
        }
     
    }

    private void disableFields() {
        txtPassword.setEditable(false);
        txtRetypePassword.setEditable(false);
        txtFullName.setEditable(false);
        txtEmail.setEditable(false);
        txtNumber.setEditable(false);
        cbxGender.setEnabled(false);
        txtPassword.setBackground(Color.BLACK);
        txtRetypePassword.setBackground(Color.BLACK);
        txtFullName.setBackground(Color.BLACK);
        txtEmail.setBackground(Color.BLACK);
        txtNumber.setBackground(Color.BLACK);
        cbxGender.setBackground(Color.BLACK);
    }

    private void enableFields() {
        txtPassword.setEditable(true);
        txtRetypePassword.setEditable(true);
        txtFullName.setEditable(true);
        txtEmail.setEditable(true);
        txtNumber.setEditable(true);
        cbxGender.setEnabled(true);
        txtPassword.setBackground(Color.WHITE);
        txtRetypePassword.setBackground(Color.WHITE);
        txtFullName.setBackground(Color.WHITE);
        txtEmail.setBackground(Color.WHITE);
        txtNumber.setBackground(Color.WHITE);
        cbxGender.setBackground(Color.WHITE);
    }

    
    //This method is for initial start of the frame
    public void initGUI() {
        
        //This will padding for the textfields
        txtNewUsername.setBorder(BorderFactory.createCompoundBorder(txtNewUsername.getBorder(), BorderFactory.createEmptyBorder(5, 5, 5, 4)));
        txtPassword.setBorder(BorderFactory.createCompoundBorder(txtPassword.getBorder(), BorderFactory.createEmptyBorder(5, 5, 5, 4)));
        txtFullName.setBorder(BorderFactory.createCompoundBorder(txtFullName.getBorder(), BorderFactory.createEmptyBorder(5, 5, 5, 4)));
        txtRetypePassword.setBorder(BorderFactory.createCompoundBorder(txtRetypePassword.getBorder(), BorderFactory.createEmptyBorder(5, 5, 5, 4)));
        txtEmail.setBorder(BorderFactory.createCompoundBorder(txtEmail.getBorder(), BorderFactory.createEmptyBorder(5, 5, 5, 4)));
        txtNumber.setBorder(BorderFactory.createCompoundBorder(txtNumber.getBorder(), BorderFactory.createEmptyBorder(5, 5, 5, 4)));

        //Disable autofucous in buttons
        btnDelete.setFocusable(false);
        btnSearch.setFocusable(false);
        btnClear.setFocusable(false);
        btnUpdate.setFocusable(false);
        btnMainMenu.setFocusable(false);
        tblStaff.setFocusable(false);
        tblStaff.setDefaultEditor(Object.class, null);

         disableFields();

        
        
         lblnote.setText("<HTML>Please Note:<br>Search the staff's username first in order to register the staff</HTML>");
        
        
        
        // This class handles window closing event
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                int selection = JOptionPane.showConfirmDialog(null, "Want to exit?", "Closing Manage Staff", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (selection == JOptionPane.YES_OPTION) {              
                    new MainVMFram().setVisible(true);  
                   //This will clear the login session
                    clearStaffSession();
                    setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
                    dispose();
                  
                } else {
                    setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
                }
            }
        });

        getStaffDetails(); //This will retrieve all staff details

        staffInputCharacterValidator(); //This is to validate the character inserted
    }

    // This method handles password comparison 
    private boolean comparePassword() {
        boolean isSimilar = false;
        String firstPass = String.valueOf(txtPassword.getPassword());
        String secondPass = String.valueOf(txtRetypePassword.getPassword());
        if ("".equals(firstPass) || "".equals(secondPass)) {
            isSimilar = false;
        } else if (firstPass.equals(secondPass)) {
            isSimilar = true;
        }
        return isSimilar;
    }


    
    
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnMainMenu;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cbxGender;
    private javax.swing.JFormattedTextField jFormattedTextField1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel lblEmail;
    private javax.swing.JLabel lblGender;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblNumber;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblRetypePassword;
    private javax.swing.JLabel lblUsername;
    private javax.swing.JLabel lblnote;
    private javax.swing.JTable tblStaff;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtFullName;
    private javax.swing.JTextField txtNewUsername;
    private javax.swing.JFormattedTextField txtNumber;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JPasswordField txtRetypePassword;
    // End of variables declaration//GEN-END:variables
}
