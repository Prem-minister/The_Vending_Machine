/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.the_vending_machine;

import java.awt.event.*;
import java.io.*;
import java.text.DecimalFormat;
import java.util.*;
import java.util.logging.*;
import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;

/**
 *
 * @author premsharaan
 */
public class StaffRegister extends javax.swing.JFrame {
   /*
    //Not in use anymore
    //Variable to be accesses globally
    //File directory to be accessed
    //File file = new File ("/Users/premsharaan/NetBeansProjects/The_Vending_Machine");    
    //Set variable for line
    //int line;
    */

    //Set variable for later usage
    private String StaffID, projectDir;
    private int newStaffID;
    private final String prefixID = "STF";
    DecimalFormat deciFormat = new DecimalFormat("000");

    /**
     * Creates new form StaffRegister
     */
    public StaffRegister() {
        initComponents();
        initGUI();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btnMainMenu = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        lblName = new javax.swing.JLabel();
        txtFullName = new javax.swing.JTextField();
        lblUsername = new javax.swing.JLabel();
        txtNewUsername = new javax.swing.JTextField();
        lblPassword = new javax.swing.JLabel();
        lblRetypePassword = new javax.swing.JLabel();
        btnReset = new javax.swing.JButton();
        txtUsername = new javax.swing.JTextField();
        lblGender = new javax.swing.JLabel();
        cbxGender = new javax.swing.JComboBox<>();
        lblNumber = new javax.swing.JLabel();
        txtNumber = new javax.swing.JFormattedTextField();
        lblEmail = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        txtPassword = new javax.swing.JPasswordField();
        txtRetypePassword = new javax.swing.JPasswordField();
        btnRegister = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        lblnote = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Register Staff");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        btnMainMenu.setBackground(new java.awt.Color(102, 102, 102));
        btnMainMenu.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        btnMainMenu.setForeground(new java.awt.Color(255, 255, 255));
        btnMainMenu.setText("Main Menu");
        btnMainMenu.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnMainMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMainMenuActionPerformed(evt);
            }
        });

        lblTitle.setFont(new java.awt.Font("Avenir Next", 1, 36)); // NOI18N
        lblTitle.setForeground(new java.awt.Color(139, 0, 0));
        lblTitle.setText("Staff Registration");

        lblName.setFont(new java.awt.Font("Corsiva Hebrew", 0, 18)); // NOI18N
        lblName.setForeground(new java.awt.Color(102, 0, 0));
        lblName.setText("Full Name : ");

        txtFullName.setBackground(new java.awt.Color(255, 255, 255));
        txtFullName.setFont(new java.awt.Font("Avenir Next", 0, 15)); // NOI18N
        txtFullName.setForeground(new java.awt.Color(51, 51, 51));
        txtFullName.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        txtFullName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFullNameActionPerformed(evt);
            }
        });

        lblUsername.setFont(new java.awt.Font("Corsiva Hebrew", 0, 18)); // NOI18N
        lblUsername.setForeground(new java.awt.Color(102, 0, 0));
        lblUsername.setText("Username :");

        txtNewUsername.setBackground(new java.awt.Color(255, 255, 255));
        txtNewUsername.setFont(new java.awt.Font("Avenir Next", 0, 15)); // NOI18N
        txtNewUsername.setForeground(new java.awt.Color(51, 51, 51));
        txtNewUsername.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        txtNewUsername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNewUsernameActionPerformed(evt);
            }
        });

        lblPassword.setFont(new java.awt.Font("Corsiva Hebrew", 0, 18)); // NOI18N
        lblPassword.setForeground(new java.awt.Color(102, 0, 0));
        lblPassword.setText("Password :");

        lblRetypePassword.setFont(new java.awt.Font("Corsiva Hebrew", 0, 18)); // NOI18N
        lblRetypePassword.setForeground(new java.awt.Color(102, 0, 0));
        lblRetypePassword.setText("Retype Password :");

        btnReset.setBackground(new java.awt.Color(153, 0, 0));
        btnReset.setFont(new java.awt.Font("Corsiva Hebrew", 1, 13)); // NOI18N
        btnReset.setForeground(new java.awt.Color(255, 255, 255));
        btnReset.setText("Reset");
        btnReset.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        txtUsername.setBackground(new java.awt.Color(153, 0, 0));
        txtUsername.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 13)); // NOI18N
        txtUsername.setForeground(new java.awt.Color(255, 255, 255));
        txtUsername.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblGender.setFont(new java.awt.Font("Corsiva Hebrew", 0, 18)); // NOI18N
        lblGender.setForeground(new java.awt.Color(102, 0, 0));
        lblGender.setText("Gender :");

        cbxGender.setBackground(new java.awt.Color(255, 255, 255));
        cbxGender.setFont(new java.awt.Font("Avenir Next", 0, 15)); // NOI18N
        cbxGender.setForeground(new java.awt.Color(0, 0, 0));
        cbxGender.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "----", "Male", "Female" }));
        cbxGender.setBorder(null);

        lblNumber.setFont(new java.awt.Font("Corsiva Hebrew", 0, 18)); // NOI18N
        lblNumber.setForeground(new java.awt.Color(102, 0, 0));
        lblNumber.setText("Phone Number :");

        txtNumber.setBackground(new java.awt.Color(255, 255, 255));
        txtNumber.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        txtNumber.setForeground(new java.awt.Color(0, 0, 0));
        try {
            txtNumber.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###-#######")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtNumber.setToolTipText("");
        txtNumber.setFont(new java.awt.Font("Avenir Next", 0, 15)); // NOI18N
        txtNumber.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNumberFocusLost(evt);
            }
        });
        txtNumber.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtNumberKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtNumberKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNumberKeyTyped(evt);
            }
        });

        lblEmail.setFont(new java.awt.Font("Corsiva Hebrew", 0, 18)); // NOI18N
        lblEmail.setForeground(new java.awt.Color(102, 0, 0));
        lblEmail.setText("Email :");

        txtEmail.setBackground(new java.awt.Color(255, 255, 255));
        txtEmail.setFont(new java.awt.Font("Avenir Next", 0, 15)); // NOI18N
        txtEmail.setForeground(new java.awt.Color(51, 51, 51));
        txtEmail.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        txtEmail.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtEmailFocusLost(evt);
            }
        });
        txtEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEmailActionPerformed(evt);
            }
        });
        txtEmail.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtEmailKeyReleased(evt);
            }
        });

        txtPassword.setBackground(new java.awt.Color(255, 255, 255));
        txtPassword.setFont(new java.awt.Font("Avenir Next", 0, 15)); // NOI18N
        txtPassword.setForeground(new java.awt.Color(51, 51, 51));
        txtPassword.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

        txtRetypePassword.setBackground(new java.awt.Color(255, 255, 255));
        txtRetypePassword.setFont(new java.awt.Font("Avenir Next", 0, 15)); // NOI18N
        txtRetypePassword.setForeground(new java.awt.Color(51, 51, 51));
        txtRetypePassword.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

        btnRegister.setBackground(new java.awt.Color(153, 0, 0));
        btnRegister.setFont(new java.awt.Font("Corsiva Hebrew", 1, 13)); // NOI18N
        btnRegister.setForeground(new java.awt.Color(255, 255, 255));
        btnRegister.setText("Register");
        btnRegister.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnRegister.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegisterActionPerformed(evt);
            }
        });

        lblnote.setBackground(new java.awt.Color(51, 51, 51));
        lblnote.setFont(new java.awt.Font(".SF NS Text", 1, 13)); // NOI18N
        lblnote.setForeground(new java.awt.Color(51, 51, 51));
        lblnote.setText("Please Note: Fill up all the details in order to register the staff ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(489, 489, 489)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(lblRetypePassword)
                            .addGap(34, 34, 34)
                            .addComponent(txtRetypePassword, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(lblPassword)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(lblUsername)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtNewUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(cbxGender, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtFullName, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(502, 511, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(489, 489, 489)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblGender, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblName, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 662, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(378, 378, 378))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(547, 547, 547)
                        .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(83, 83, 83)
                        .addComponent(btnRegister, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(571, 571, 571)
                        .addComponent(lblTitle)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblnote, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnMainMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblnote))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(btnMainMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(37, 37, 37)
                .addComponent(lblTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNewUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblRetypePassword, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtRetypePassword, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblName, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFullName, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblGender, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbxGender, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(58, 58, 58)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRegister, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 206, Short.MAX_VALUE)
                .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtFullNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFullNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFullNameActionPerformed

    private void txtNewUsernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNewUsernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNewUsernameActionPerformed

    private void btnMainMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMainMenuActionPerformed
        int selection = JOptionPane.showConfirmDialog(null, "Going back to main menu will cancel the ongoing registration. Continue?", "Returning to Main Menu!", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (selection == JOptionPane.YES_OPTION) {
            this.dispose();
            new StaffMainMenu().setVisible(true);
        }
    }//GEN-LAST:event_btnMainMenuActionPerformed

    private void txtEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEmailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEmailActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        clearDetails();

    }//GEN-LAST:event_btnResetActionPerformed

    private void txtEmailFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtEmailFocusLost
        StaffEmailValidation invalidate = new StaffEmailValidation();
        invalidate.runValidate(txtEmail, true);
    }//GEN-LAST:event_txtEmailFocusLost

    private void btnRegisterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegisterActionPerformed
        registerStaff(txtNewUsername.getText(), txtPassword.getText(), txtRetypePassword.getText(), txtFullName.getText(), (String) cbxGender.getSelectedItem(), txtNumber.getText(), txtEmail.getText());
    }//GEN-LAST:event_btnRegisterActionPerformed

    private void txtEmailKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEmailKeyReleased
   
    }//GEN-LAST:event_txtEmailKeyReleased

    private void txtNumberKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNumberKeyReleased
      
    }//GEN-LAST:event_txtNumberKeyReleased

    private void txtNumberKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNumberKeyPressed
         
    }//GEN-LAST:event_txtNumberKeyPressed

    private void txtNumberKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNumberKeyTyped
     
    }//GEN-LAST:event_txtNumberKeyTyped

    private void txtNumberFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNumberFocusLost
      
    }//GEN-LAST:event_txtNumberFocusLost

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StaffRegister.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StaffRegister.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StaffRegister.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StaffRegister.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                 StaffRegister frame = new StaffRegister();
                 frame.setVisible(true);
                 frame.setResizable(false);

            }
        });
    }



    // This method is to delete a temporary staff session that has been created during verification
    private void clearStaffSession() {
        try {
            // This sets the directory of the project
             projectDir = System.getProperty("user.dir") + "//db_txtFiles//";
            File staffCache = new File(projectDir + "StaffCache.txt");
            if (staffCache.exists()) {
                staffCache.delete();
            }
        } catch (Exception ex) {

        }
    }

       // This method clears all the fields
    public void clearDetails() {
        txtNewUsername.setText("");
        txtPassword.setText("");
        txtRetypePassword.setText("");
        StaffID = "";
        txtFullName.setText("");
        cbxGender.setSelectedIndex(0);
        txtNumber.setText("");
        txtEmail.setText("");
    }

    //This method raise message for empty fields, password comparison and username validation.
    private void validateInput() {
        if ("".equals(txtNewUsername.getText()) && "".equals(txtFullName.getText()) && "".equals(txtNumber.getText()) && "".equals(txtEmail.getText())) {
            JOptionPane.showMessageDialog(null, "Invalid input! Please input every fields to proceed.", "Invalid insertion detected!", JOptionPane.WARNING_MESSAGE);
        } else if ("".equals(txtNewUsername.getText())) {
            JOptionPane.showMessageDialog(null, "Invalid input! Please input username to proceed.", "Invalid insertion detected!", JOptionPane.WARNING_MESSAGE);
        } else if ("".equals(String.valueOf(txtPassword.getPassword()))) {
            JOptionPane.showMessageDialog(null, "Invalid input! Pleass input password to proceed.", "Invalid insertion detected!", JOptionPane.WARNING_MESSAGE);
        } else if ("".equals(String.valueOf(txtRetypePassword.getPassword()))) {
            JOptionPane.showMessageDialog(null, "Invalid input! Please input retype password to proceed.", "Invalid insertion detected!", JOptionPane.WARNING_MESSAGE);
        } else if ("".equals(txtFullName.getText())) {
            JOptionPane.showMessageDialog(null, "Invalid input! Please input full name to proceed.", "Invalid insertion detected!", JOptionPane.WARNING_MESSAGE);
        } else if (cbxGender.getSelectedIndex() <= 0) {
            JOptionPane.showMessageDialog(null, "Gender is not selected!", "Gender unselected!", JOptionPane.WARNING_MESSAGE);
        } else if ("".equals(txtEmail.getText())) {
            JOptionPane.showMessageDialog(null, "Invalid input! Please input email to proceed.", "Invalid insertion detected!", JOptionPane.WARNING_MESSAGE);
        } else if ("   -       ".equals(txtNumber.getText())) {
            JOptionPane.showMessageDialog(null, "Invalid input! Please input phone number to proceed.", "Invalid insertion detected!", JOptionPane.WARNING_MESSAGE);
        } else if (!comparePassword()) {
            JOptionPane.showMessageDialog(null, "Password is not same!", "Password mismatch!", JOptionPane.WARNING_MESSAGE);
        } else if(usernameValidation(txtNewUsername.getText())) {
            JOptionPane.showMessageDialog(null, "Username is already taken by another staff! Use a different Username to proceed.", "Username is in use!", JOptionPane.ERROR_MESSAGE);

        } else if (cbxGender.getSelectedIndex() <= 0) {
            JOptionPane.showMessageDialog(null, "Gender is not selected!", "Gender unselected!", JOptionPane.ERROR_MESSAGE);
        }
    }

    // This method handles all validation related to the fields
    private void staffInputCharacterValidator() {
        txtNewUsername.getDocument().addDocumentListener(new VenStaffDocumentListener() {
            StaffUsernameValidation invalidate = new StaffUsernameValidation();

            @Override
            public void changedUpdate(DocumentEvent e) {
                invalidate.runValidate(txtNewUsername);
                invalidate.setRegex("testing");
                invalidate.getRegex();
            }

            @Override
            public void insertUpdate(DocumentEvent e) {
                invalidate.runValidate(txtNewUsername);
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                invalidate.runValidate(txtNewUsername);
            }

        });
        txtPassword.getDocument().addDocumentListener(new VenStaffDocumentListener() {
            StaffPasswordValidation invalidate = new StaffPasswordValidation();

            @Override
            public void changedUpdate(DocumentEvent e) {
                invalidate.runValidate(txtPassword);
            }

            @Override
            public void insertUpdate(DocumentEvent e) {
                invalidate.runValidate(txtPassword);
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                invalidate.runValidate(txtPassword);
            }
        });
        
        txtRetypePassword.getDocument().addDocumentListener(new VenStaffDocumentListener() {
            StaffPasswordValidation invalidate = new StaffPasswordValidation();

            @Override
            public void changedUpdate(DocumentEvent e) {
                invalidate.runValidate(txtRetypePassword);
            }

            @Override
            public void insertUpdate(DocumentEvent e) {
                invalidate.runValidate(txtRetypePassword);
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                invalidate.runValidate(txtRetypePassword);
            }
        });
        txtFullName.getDocument().addDocumentListener(new VenStaffDocumentListener() {
            StaffFullNameValidation invalidate = new StaffFullNameValidation();

            @Override
            public void changedUpdate(DocumentEvent e) {
                invalidate.runValidate(txtFullName);
            }

            @Override
            public void insertUpdate(DocumentEvent e) {
                invalidate.runValidate(txtFullName);
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                invalidate.runValidate(txtFullName);
            }
        });
        

        
    }

    // This is a new exception class
    public void emptyInputFields() throws Exception {
        StaffEmailValidation invalidate = new StaffEmailValidation();
        if ("".equals(txtNewUsername.getText())) {
            throw new Exception("Empty staff username");
        }
        if ("".equals(String.valueOf(txtPassword.getPassword()))) {
            throw new Exception("Empty staff password");
        }
        if ("".equals(String.valueOf(txtRetypePassword.getPassword()))) {
            throw new Exception("Empty staff retype password");
        }
        if ("".equals(txtFullName.getText())) {
            throw new Exception("Empty staff full name");
        }
        if ("".equals(txtNumber.getText())) {
            throw new Exception("Empty staff phone number");
        }
        if ("".equals(txtEmail.getText())) {
            throw new Exception("Empty staff email");
        }

        if (invalidate.runValidate(txtEmail, false)) {
            throw new Exception("Invalid  staff email address format");
        }
    }

    // This method handles password comparison 
    private boolean comparePassword() {
        boolean isSimilar = false;
        String firstPass = String.valueOf(txtPassword.getPassword());
        String secondPass = String.valueOf(txtRetypePassword.getPassword());
        if ("".equals(firstPass) || "".equals(secondPass)) {
            isSimilar = false;
        } else if (firstPass.equals(secondPass)) {
            isSimilar = true;
        }
        return isSimilar;
    }

    //This method is to increment the staffID
    private void staffIDIncrementor() {
        boolean hasStaffIDRecord = false;
        // This array is to store all lines
        String[] staffDetails = null;
        try {
            // This sets the directory of the project
            projectDir = System.getProperty("user.dir") + "//db_txtFiles//";
            File staffFile = new File(projectDir + "AdminVerify.txt");
            if (!staffFile.exists()) {
                staffFile.createNewFile();
            }
            Scanner readFile;
            try {
                // Read lines from the file until no more are left.
                readFile = new Scanner(staffFile);
                while (readFile.hasNext()) {
                    // Read the next line.
                    String nextStaff = readFile.nextLine();

                    // Split the line by using the colon ":" and store into  an array.
                    staffDetails = nextStaff.split(":");
                    staffDetails[2] = staffDetails[2].replace("STF", "");
                    hasStaffIDRecord = true;
                }
                readFile.close();
                if (!hasStaffIDRecord) {
                    JOptionPane.showMessageDialog(null, "The system does not find any staff details inside the text file", "Staff Record is empty!", JOptionPane.ERROR_MESSAGE);
                    newStaffID = 1;
                } else {
                    newStaffID = Integer.parseInt(staffDetails[2]) + 1;
                }

            } catch (FileNotFoundException ex) {
                Logger.getLogger(StaffRegister.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex);
            JOptionPane.showMessageDialog(null, "Invalid input Staff ID", "Invalid input type!", JOptionPane.ERROR_MESSAGE);
        }
    }

    //This method is to check whether the username entered taken by other staff or not
    public boolean usernameValidation(String staffUsername) {
        boolean notFound = false;
        // This array is to store all lines
        String[] staffDetails;

        try {
            // This sets the directory of the project
            projectDir = System.getProperty("user.dir") + "//db_txtFiles//";
            // This sets the file which going to be accessed
            File staffFile = new File(projectDir + "AdminVerify.txt");
            if (!staffFile.exists()) {
                staffFile.createNewFile();
            }
            Scanner searchUsername = new Scanner(staffFile);
            // Read till last line of file
            while (searchUsername.hasNext()) {
                // Read the next line.
                String inputUsername = searchUsername.nextLine();
                // Split the details by using the colon and store in an array.
                staffDetails = inputUsername.split(":");
                if (staffUsername.equals(staffDetails[0])) {
                    notFound = true;
                }
            }
            searchUsername.close();
        } catch (Exception ex) {

        }
        return notFound;
    }

    
    // This method handles the staff registration
    private void registerStaff(String staffUsername, String staffPassword, String staffRetypePassword, String staffFullName, String staffGender, String staffNumber, String staffEmail) {
        usernameValidation(txtNewUsername.getText());
        projectDir = System.getProperty("user.dir") + "//db_txtFiles//";
        try {
            //This throws the exception
            emptyInputFields();
            // To check username availability
            if (usernameValidation(txtNewUsername.getText())) {
                throw new Exception("Username is already in use by another staff.");
            }
            // This compare the password and retype password
            if (!comparePassword()) {
                throw new Exception("Password and retype password entered not same!");
            }

            // This is will be displayed when the combo box is selected default
            if (cbxGender.getSelectedIndex() <= 0) {
                JOptionPane.showMessageDialog(null, "Gender not selected!", "Gender unselected!", JOptionPane.ERROR_MESSAGE);
            }
            try {
                StaffID = deciFormat.format(newStaffID);
                FileWriter fw = new FileWriter(projectDir + "AdminVerify.txt", true);
                BufferedWriter bw  = new BufferedWriter(fw);
                bw.write(staffUsername + ":" + staffPassword + ":" + prefixID + StaffID + ":" +staffFullName + ":" + staffGender + ":" + staffNumber + ":" + staffEmail + "\n");
                JOptionPane.showMessageDialog(null, "Staff has been registered successfully! Click OK to return to staff registration form.", "Account successfully created!", JOptionPane.INFORMATION_MESSAGE);
                bw.close();
                staffIDIncrementor();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(StaffRegister.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(StaffRegister.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (Exception e) {
            validateInput();

        }
    }

         //This method is to get username and display it in textfield
    private void getUsername() {
       String[] staffCredential;
        try {
            // This sets the directory of the project
            projectDir = System.getProperty("user.dir") + "//db_txtFiles//";
            // This sets the file which going to be accessed
            File cacheFile = new File(projectDir + "StaffCache.txt");
            if (!cacheFile.exists()) {
                cacheFile.createNewFile();
            }
            Scanner searchUsername = new Scanner(cacheFile);
            // Read till last line of file
            while (searchUsername.hasNext()) {
                // Read the next line.
                String inputUsername = searchUsername.nextLine();
                // Split the details by using the colon and store in an array.
                staffCredential = inputUsername.split(":");
                txtUsername.setText(staffCredential[0]);
            }
            searchUsername.close();
        } catch (Exception ex) {

        }
    }
    
       
    
    //This method is for initial start of the frame
    public void initGUI() {
        //This sets the staff's username to align center
         txtUsername.setHorizontalAlignment(JTextField.CENTER);
        
        //This will padding for the textfields
        txtNewUsername.setBorder(BorderFactory.createCompoundBorder(txtNewUsername.getBorder(), BorderFactory.createEmptyBorder(5, 5, 5, 4)));
        txtPassword.setBorder(BorderFactory.createCompoundBorder(txtPassword.getBorder(), BorderFactory.createEmptyBorder(5, 5, 5, 4)));
        txtFullName.setBorder(BorderFactory.createCompoundBorder(txtFullName.getBorder(), BorderFactory.createEmptyBorder(5, 5, 5, 4)));
        txtRetypePassword.setBorder(BorderFactory.createCompoundBorder(txtRetypePassword.getBorder(), BorderFactory.createEmptyBorder(5, 5, 5, 4)));
        txtEmail.setBorder(BorderFactory.createCompoundBorder(txtEmail.getBorder(), BorderFactory.createEmptyBorder(5, 5, 5, 4)));
        txtNumber.setBorder(BorderFactory.createCompoundBorder(txtNumber.getBorder(), BorderFactory.createEmptyBorder(5, 5, 5, 4)));

        //Disable autofucous in buttons
        btnMainMenu.setFocusable(false);
        btnRegister.setFocusable(false);
        btnReset.setFocusable(false);

        //This sets the increment staff id for the new staff
        staffIDIncrementor();

        
        //This will get the staff's username and set it inside the textfield
        getUsername();
        
               
        //This sets the multiple line text for the note label using the html code
        lblnote.setText("<HTML>Please Note:<br>Fill up all the details <br> in order to register the staff</HTML>");
        
        // This class handles window closing event
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                int selection = JOptionPane.showConfirmDialog(null, "Want to exit?", "Closing Staff Register", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (selection == JOptionPane.YES_OPTION) {
                   new MainVMFram().setVisible(true);  
                   //This will clear the login session
                    clearStaffSession();
                    setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
                    dispose();
                } else {
                    setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
                }
            }
        });

        staffInputCharacterValidator();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnMainMenu;
    private javax.swing.JButton btnRegister;
    private javax.swing.JButton btnReset;
    private javax.swing.JComboBox<String> cbxGender;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblEmail;
    private javax.swing.JLabel lblGender;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblNumber;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblRetypePassword;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblUsername;
    private javax.swing.JLabel lblnote;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtFullName;
    private javax.swing.JTextField txtNewUsername;
    private javax.swing.JFormattedTextField txtNumber;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JPasswordField txtRetypePassword;
    private javax.swing.JTextField txtUsername;
    // End of variables declaration//GEN-END:variables
    }
 

//This is not in use anymore
/*
  //This method is to count the text file lines
    public void countTextFilelines() {
        try {
           line = 0;
            RandomAccessFile Raf = new RandomAccessFile(file + "/AdminVerify.txt", "rw");
            for (int i = 0; Raf.readLine() != null; i++) {
                line++;
            }
            System.out.println("number of lines:" + line);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(StaffVerification.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(StaffVerification.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
 */
