/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.the_vending_machine;
import java.awt.Image;
import java.awt.event.*;
import java.io.*;
import java.util.Scanner;
import javax.swing.*;

/**
 *
 * @author premsharaan
 */
public class StaffVerification extends javax.swing.JFrame {

    /*
   //This is not in use anymore
   //Setting Text File directory for the staff credentials
   //File file = new File ("/Users/premsharaan/NetBeansProjects/The_Vending_Machine");
    
    //Variables for staff credentials
    String Username, Password;
    
    //Set variable for line
    int line; 
     */
    
    //Setting private string variables
    private String projectDir, StaffUsername, StaffID;

    /**
     * Creates new form StaffVerification
     */
    public StaffVerification() {
        initComponents();
        initGUI();
    }

    // This method is to create a temporary staff session that stores relevant user detail
    private void startStaffSession() {
        try {
            // This sets the directory of the project
            projectDir = System.getProperty("user.dir") + "//db_txtFiles//";
            File staffCacheFile = new File(projectDir + "StaffCache.txt");
            if (!staffCacheFile.exists()) {
                staffCacheFile.createNewFile();
            }
            FileWriter fw = new FileWriter(projectDir + "StaffCache.txt", true);
            BufferedWriter bw = new BufferedWriter(fw);
            bw.write(StaffUsername + ":" + StaffID);
            bw.close();
        } catch (Exception ex) {

        }
    }

   // This method is to delete a temporary staff session that has been created during verification
    private void clearStaffSession() {
        try {
            // This sets the directory of the project
            projectDir = System.getProperty("user.dir") + "//db_txtFiles//";
            File staffCache = new File(projectDir + "StaffCache.txt");
            if (staffCache.exists()) {
                staffCache.delete();
            }
        } catch (Exception ex) {

        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainLoginPanel = new javax.swing.JPanel();
        pnlLogin = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        lblTitle2 = new javax.swing.JLabel();
        lblUsername = new javax.swing.JLabel();
        txtUsername = new javax.swing.JTextField();
        lblPassword = new javax.swing.JLabel();
        chkBoxShow = new javax.swing.JCheckBox();
        btnVerify = new javax.swing.JButton();
        txtPassword = new javax.swing.JPasswordField();
        lblLoginLogo = new javax.swing.JLabel();
        lblTitle = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        btnBack = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Login in as Staff");

        mainLoginPanel.setBackground(new java.awt.Color(254, 252, 255));
        mainLoginPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        pnlLogin.setBackground(new java.awt.Color(255, 254, 252));
        pnlLogin.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(204, 204, 204)));
        pnlLogin.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        pnlLogin.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(436, 54, -1, -1));

        lblTitle2.setFont(new java.awt.Font(".SF NS Text", 3, 15)); // NOI18N
        lblTitle2.setForeground(new java.awt.Color(51, 51, 51));
        lblTitle2.setText("Please verify yourself as a staff using your crendentials!");
        pnlLogin.add(lblTitle2, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 211, -1, -1));

        lblUsername.setFont(new java.awt.Font("Tahoma", 3, 15)); // NOI18N
        lblUsername.setForeground(new java.awt.Color(153, 0, 0));
        lblUsername.setText("USERNAME");
        pnlLogin.add(lblUsername, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 292, 96, -1));

        txtUsername.setBackground(new java.awt.Color(255, 255, 255));
        txtUsername.setFont(new java.awt.Font("Lao Sangam MN", 0, 16)); // NOI18N
        txtUsername.setForeground(new java.awt.Color(0, 0, 0));
        txtUsername.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(0, 0, 0)));
        txtUsername.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtUsernameMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                txtUsernameMousePressed(evt);
            }
        });
        txtUsername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUsernameActionPerformed(evt);
            }
        });
        txtUsername.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtUsernameKeyPressed(evt);
            }
        });
        pnlLogin.add(txtUsername, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 317, 298, 36));

        lblPassword.setFont(new java.awt.Font("Tahoma", 3, 15)); // NOI18N
        lblPassword.setForeground(new java.awt.Color(153, 0, 0));
        lblPassword.setText("PASSWORD");
        pnlLogin.add(lblPassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 386, 97, -1));

        chkBoxShow.setBackground(new java.awt.Color(255, 255, 255));
        chkBoxShow.setForeground(new java.awt.Color(0, 0, 0));
        chkBoxShow.setText("Show Password");
        chkBoxShow.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        chkBoxShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkBoxShowActionPerformed(evt);
            }
        });
        pnlLogin.add(chkBoxShow, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 420, -1, -1));

        btnVerify.setBackground(new java.awt.Color(153, 0, 0));
        btnVerify.setFont(new java.awt.Font("Beirut", 0, 15)); // NOI18N
        btnVerify.setForeground(new java.awt.Color(255, 255, 255));
        btnVerify.setText("Verify");
        btnVerify.setBorder(null);
        btnVerify.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnVerify.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnVerifyMouseClicked(evt);
            }
        });
        btnVerify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerifyActionPerformed(evt);
            }
        });
        pnlLogin.add(btnVerify, new org.netbeans.lib.awtextra.AbsoluteConstraints(282, 495, 111, 40));

        txtPassword.setBackground(new java.awt.Color(255, 255, 255));
        txtPassword.setFont(new java.awt.Font("Lao Sangam MN", 0, 16)); // NOI18N
        txtPassword.setForeground(new java.awt.Color(0, 0, 0));
        txtPassword.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(0, 0, 0)));
        txtPassword.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                txtPasswordMousePressed(evt);
            }
        });
        txtPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPasswordActionPerformed(evt);
            }
        });
        pnlLogin.add(txtPassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 411, 298, 36));
        pnlLogin.add(lblLoginLogo, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 20, 180, 170));

        mainLoginPanel.add(pnlLogin, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 170, 650, 660));

        lblTitle.setFont(new java.awt.Font("Al Nile", 1, 22)); // NOI18N
        lblTitle.setForeground(new java.awt.Color(153, 0, 0));
        lblTitle.setText("Sign In With Your Staff Credentials");
        mainLoginPanel.add(lblTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 140, -1, -1));

        jPanel4.setBackground(new java.awt.Color(204, 0, 0));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 970, Short.MAX_VALUE)
        );

        mainLoginPanel.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(1350, 0, -1, 970));

        btnBack.setBackground(new java.awt.Color(153, 0, 0));
        btnBack.setFont(new java.awt.Font(".SF NS Text", 1, 14)); // NOI18N
        btnBack.setForeground(new java.awt.Color(255, 255, 255));
        btnBack.setText("Go Back");
        btnBack.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        mainLoginPanel.add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(1240, 10, 97, 38));

        jPanel5.setBackground(new java.awt.Color(204, 0, 0));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 970, Short.MAX_VALUE)
        );

        mainLoginPanel.add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -6, -1, 970));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainLoginPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainLoginPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //This action will perform the verification
    private void btnVerifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerifyActionPerformed
        if (txtUsername.getText().isBlank() & txtPassword.getText().isBlank()) {
            JOptionPane.showMessageDialog(null, "You haven't input the fields!", "Warning", JOptionPane.WARNING_MESSAGE);
        } else if (txtUsername.getText().isBlank()) {
            JOptionPane.showMessageDialog(null, "You haven't input the Username!", "Warning", JOptionPane.WARNING_MESSAGE);
        } else if (txtPassword.getText().isBlank()) {
            JOptionPane.showMessageDialog(null, "You haven't input the Password!", "Warning", JOptionPane.WARNING_MESSAGE);
        } else if (staffVerification()) {
            JOptionPane.showMessageDialog(null, "Staff Verification is successful! Redirecting you to the staff main menu.", "Staff Verified Successfully!", JOptionPane.INFORMATION_MESSAGE);
            startStaffSession();
            new StaffMainMenu().setVisible(true);
            this.dispose();
        } else {
            JOptionPane.showMessageDialog(null, "Staff Verification is not successful! Your username or password may be wrong.", "Staff Verification Failed!", JOptionPane.ERROR_MESSAGE);
        }


    }//GEN-LAST:event_btnVerifyActionPerformed

    //This is to hide and show the password
    private void chkBoxShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkBoxShowActionPerformed
        if (chkBoxShow.isSelected()) {
            txtPassword.setEchoChar((char) 0);
        } else {
            txtPassword.setEchoChar('*');
        }
    }//GEN-LAST:event_chkBoxShowActionPerformed

    private void btnVerifyMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnVerifyMouseClicked
        /* This is not in use anymore
  
        //Check data whether it matches from the user input
        //CheckCredentialsMultipleLine(txtUsername.getText(), txtPassword.getText());
        //Check data line by line
        //CheckCredentialsLines();
         validateInput();
         if (staffVerification()) {
            JOptionPane.showMessageDialog(null, "Staff Verification is successfull! Redirecting you to the staff main menu.", "Staff Verified Successfully!", JOptionPane.INFORMATION_MESSAGE);     
            new StaffMainFrame().setVisible(true);
            this.dispose();
        } else {
            JOptionPane.showMessageDialog(null, " Staff Verification failed! Your username or password may be wrong.", "Staff Verification Failed!", JOptionPane.ERROR_MESSAGE);
      }
         */
    }//GEN-LAST:event_btnVerifyMouseClicked

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
       clearStaffSession();
       new MainVMFram().setVisible(true);
       this.dispose();
    }//GEN-LAST:event_btnBackActionPerformed

    private void txtUsernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUsernameActionPerformed
     
    }//GEN-LAST:event_txtUsernameActionPerformed

    private void txtPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPasswordActionPerformed

    }//GEN-LAST:event_txtPasswordActionPerformed

    private void txtUsernameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUsernameKeyPressed
     
    }//GEN-LAST:event_txtUsernameKeyPressed

    private void txtUsernameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtUsernameMouseClicked
     
    }//GEN-LAST:event_txtUsernameMouseClicked

    private void txtUsernameMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtUsernameMousePressed
       
    }//GEN-LAST:event_txtUsernameMousePressed

    private void txtPasswordMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtPasswordMousePressed

    }//GEN-LAST:event_txtPasswordMousePressed

    /**
     * @param args the command line arguments
     */
    
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StaffVerification.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StaffVerification.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StaffVerification.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StaffVerification.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                   StaffVerification frame = new StaffVerification();
                  frame.setVisible(true);
                  frame.setResizable(false);
            }
        });
    }

    //This method is to verify the staff using the staff username and  staff password
    //This checks every credentials for multiple line
    private boolean staffVerification() {
        boolean staffVerified = false;
        // This array is to store all lines
        String[] staffDetails;
        try {
            // This is to get the username and password from text field temporary
            String tempUsername = txtUsername.getText();
            String tempPassword = String.valueOf(txtPassword.getPassword());

            // This sets the directory of the project
            projectDir = System.getProperty("user.dir") + "//db_txtFiles//";
            // This sets the file which going to be accessed
            File staffFile = new File(projectDir + "AdminVerify.txt");

            if (!staffFile.exists()) {
                staffFile.createNewFile();
            }
            
            Scanner readFile = new Scanner(staffFile);
            // Read till last line of file
            while (readFile.hasNext()) {
                String staffInput = readFile.nextLine();

                // Split the details by using the colon and store in an array.
                staffDetails = staffInput.split(":");

                // Check every line for the credential to be matched
                if (tempUsername.equals(staffDetails[0]) && tempPassword.equals(staffDetails[1])) {
                    StaffID = staffDetails[2].replace("STF", "");
                    StaffUsername = staffDetails[0];
                    staffVerified = true;
                }
            }

            readFile.close();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex);

        }
        return staffVerified;
    }

    // This method will create the text files needed if it is not available inside the project directory
    private void createTextFiles() {
        try {
            projectDir = System.getProperty("user.dir") + "//db_txtFiles//";
            File staffFile = new File(projectDir + "AdminVerify.txt");
            File vendingItem = new File(projectDir + "StockItem.txt");
            File itemSales = new File(projectDir + "SalesReport.txt");
            if (!staffFile.exists()) {
                staffFile.createNewFile();
            }
            if (!vendingItem.exists()) {
                vendingItem.createNewFile();
            }
            if (!itemSales.exists()) {
                itemSales.createNewFile();
            }
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }

    
    //This method for Jframe initiation
    public void initGUI() {
        
        projectDir = System.getProperty("user.dir") + "//Images//";
        ImageIcon imageLogin = new ImageIcon(projectDir + "Login.png");
        Image imgLogin = imageLogin.getImage();
        lblLoginLogo.setIcon(new ImageIcon(imgLogin));
           
        
        
        //This is to set padding for fields
        txtUsername.setBorder(BorderFactory.createCompoundBorder(txtUsername.getBorder(), BorderFactory.createEmptyBorder(5, 5, 5, 4)));
        txtPassword.setBorder(BorderFactory.createCompoundBorder(txtPassword.getBorder(), BorderFactory.createEmptyBorder(5, 5, 5, 4)));
        
        //This sets the items not focusable
        btnVerify.setFocusable(false);
        btnBack.setFocusable(false);
        chkBoxShow.setFocusable(false);
        
        //Create text files if it is not existed
        createTextFiles();

        //This is to handle the window closing event
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                int selection = JOptionPane.showConfirmDialog(null, "Want to exit?", "Closing Staff Verification", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (selection == JOptionPane.YES_OPTION) { 
                    new MainVMFram().setVisible(true);
                    setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
                    //This will clear the login session if the file still exists
                    clearStaffSession();
                    dispose();               
                   
                } else {
                    setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
                }
            }
        });
    }


    
    
    
    //This is not in use anymore
    //Check credential for multiple line
    /*
   // <editor-fold defaultstate="collapsed" desc="Login Check Credentials Everyline"> 
    public void CheckCredentialsMultipleLine(String staffName, String staffPass){
       
        try {
            RandomAccessFile Raf = new RandomAccessFile(file+"/AdminVerify.txt","rw");
            for(int i=0;i<line;i+=8){
                System.out.println("count "+i);
                String lineUsername = Raf.readLine().substring(9);
                String linePassword = Raf.readLine().substring(9);
               
            if(staffName.equals(lineUsername) & staffPass.equals(linePassword)){
                JOptionPane.showMessageDialog(null, "Your credentials is verified!","Success",JOptionPane.INFORMATION_MESSAGE);
                 this.dispose(); 
                    String staffuser = txtUsername.getText();
                    StaffMainFrame StaffFrame = new StaffMainFrame();
                    StaffFrame.setStaff(staffuser);
                    StaffFrame.setVisible(true);
                
               break;
            }else if(staffName.equals("") & staffPass.equals("")){
                JOptionPane.showMessageDialog(null, "You haven't input the fields!","Warning",JOptionPane.WARNING_MESSAGE);
                break;
             }else if(staffName.isEmpty()){
                JOptionPane.showMessageDialog(null, "You haven't input the Username!","Warning",JOptionPane.WARNING_MESSAGE);  
                break;
            }else if(staffPass.isEmpty()){ 
                JOptionPane.showMessageDialog(null, "You haven't input the Password!","Warning",JOptionPane.WARNING_MESSAGE);
                break;
            }else if (i==(line-7)){
                 JOptionPane.showMessageDialog(null, "Invalid! Your credentials is not verified!","Error",JOptionPane.ERROR_MESSAGE);
                 break;
            }
               for(int l=1; l<=6; l++){
                   Raf.readLine();
               }
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(StaffVerification.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(StaffVerification.class.getName()).log(Level.SEVERE, null, ex);
        }
         
        
    }
      // </editor-fold>
    */
    
    
    //This is not in use anymore
   //Reads Every line in the Text File 
   
   /*
  public void CheckCredentialsLines(){
        try {
            line=0;
            RandomAccessFile Raf  = new RandomAccessFile(file+"/AdminVerify.txt","rw");
             for(int i=0;Raf.readLine()!=null;i++){
                   line++;
             }
             System.out.println("number of lines:"+line);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(StaffVerification.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(StaffVerification.class.getName()).log(Level.SEVERE, null, ex);
        } 
  }
*/
       
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnVerify;
    private javax.swing.JCheckBox chkBoxShow;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JLabel lblLoginLogo;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblTitle2;
    private javax.swing.JLabel lblUsername;
    private javax.swing.JPanel mainLoginPanel;
    private javax.swing.JPanel pnlLogin;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JTextField txtUsername;
    // End of variables declaration//GEN-END:variables
}
