/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.the_vending_machine;

import java.awt.*;
import java.awt.event.*;
import java.io.*;
import javax.swing.*;
import java.nio.charset.*;
import java.nio.file.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Collections;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.filechooser.*;
import org.apache.commons.io.*;

/**
 *
 * @author premsharaan
 */
public class VenAddStock extends javax.swing.JFrame {

    //Set variable for later usage
    private String projectDir;
    String oldFileLocation;
    /**
     * Creates new form VenAddStock
     */
    public VenAddStock() {
        initComponents();
        initGUI();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        btnMainMenu = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        lblSlot1 = new javax.swing.JLabel();
        lblSlot3 = new javax.swing.JLabel();
        lblSlot2 = new javax.swing.JLabel();
        lblSlot4 = new javax.swing.JLabel();
        lblSlot6 = new javax.swing.JLabel();
        lblSlot7 = new javax.swing.JLabel();
        lblSlot8 = new javax.swing.JLabel();
        lblSlot9 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        cbxItemCode = new javax.swing.JComboBox<>();
        lblCode = new javax.swing.JLabel();
        lblItemNewQty = new javax.swing.JLabel();
        btnAddQty = new javax.swing.JButton();
        btnRemoveItem = new javax.swing.JButton();
        lblCode1 = new javax.swing.JLabel();
        lblCode2 = new javax.swing.JLabel();
        lblCode3 = new javax.swing.JLabel();
        lblCode4 = new javax.swing.JLabel();
        lblCode6 = new javax.swing.JLabel();
        lblCode7 = new javax.swing.JLabel();
        lblCode8 = new javax.swing.JLabel();
        lblCode9 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel6 = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();
        lblCode5 = new javax.swing.JLabel();
        lblSlot5 = new javax.swing.JLabel();
        lblCode10 = new javax.swing.JLabel();
        lblSlot10 = new javax.swing.JLabel();
        txtQty1 = new javax.swing.JTextField();
        txtQty2 = new javax.swing.JTextField();
        txtQty3 = new javax.swing.JTextField();
        txtQty4 = new javax.swing.JTextField();
        txtQty5 = new javax.swing.JTextField();
        txtQty6 = new javax.swing.JTextField();
        txtQty7 = new javax.swing.JTextField();
        txtQty8 = new javax.swing.JTextField();
        txtQty9 = new javax.swing.JTextField();
        txtQty10 = new javax.swing.JTextField();
        txtQtyRestock = new javax.swing.JTextField();
        lblItemName = new javax.swing.JLabel();
        lblItemPrice = new javax.swing.JLabel();
        lblItemImg = new javax.swing.JLabel();
        lblItemQty = new javax.swing.JLabel();
        btnUploadImg = new javax.swing.JButton();
        txtItemName = new javax.swing.JTextField();
        txtItemPrice = new javax.swing.JTextField();
        btnUpload = new javax.swing.JButton();
        lblTemp = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jSeparator5 = new javax.swing.JSeparator();
        jSeparator6 = new javax.swing.JSeparator();
        txtQtyItem = new javax.swing.JTextField();
        btnClear = new javax.swing.JButton();
        lblImageIcon = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Upload Stock");
        setMaximumSize(new java.awt.Dimension(1440, 900));
        setPreferredSize(new java.awt.Dimension(1440, 900));

        mainPanel.setBackground(new java.awt.Color(254, 252, 255));
        mainPanel.setMaximumSize(new java.awt.Dimension(1440, 900));
        mainPanel.setPreferredSize(new java.awt.Dimension(1440, 900));
        mainPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Copperplate", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 0, 0));
        jLabel1.setText("Upload Stock for Vending Machine");
        mainPanel.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(19, 24, -1, 60));

        jSeparator1.setBackground(new java.awt.Color(0, 0, 0));
        jSeparator1.setForeground(new java.awt.Color(0, 0, 0));
        mainPanel.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(19, 90, 1449, -1));

        btnMainMenu.setBackground(new java.awt.Color(102, 0, 0));
        btnMainMenu.setFont(new java.awt.Font(".SF NS Text", 1, 14)); // NOI18N
        btnMainMenu.setForeground(new java.awt.Color(255, 255, 255));
        btnMainMenu.setText("Main Menu");
        btnMainMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMainMenuActionPerformed(evt);
            }
        });
        mainPanel.add(btnMainMenu, new org.netbeans.lib.awtextra.AbsoluteConstraints(1290, 30, 120, 36));

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Arial Hebrew Scholar", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(204, 204, 204));
        jLabel2.setText("Manage Existing Items");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 20, -1, -1));

        lblSlot1.setFont(new java.awt.Font(".SF NS Text", 1, 13)); // NOI18N
        lblSlot1.setForeground(new java.awt.Color(255, 255, 255));
        lblSlot1.setText("Slot 1 - Empty");
        jPanel1.add(lblSlot1, new org.netbeans.lib.awtextra.AbsoluteConstraints(76, 338, 132, 50));

        lblSlot3.setFont(new java.awt.Font(".SF NS Text", 1, 13)); // NOI18N
        lblSlot3.setForeground(new java.awt.Color(255, 255, 255));
        lblSlot3.setText("Slot 3 - Empty");
        jPanel1.add(lblSlot3, new org.netbeans.lib.awtextra.AbsoluteConstraints(76, 468, 142, 50));

        lblSlot2.setFont(new java.awt.Font(".SF NS Text", 1, 13)); // NOI18N
        lblSlot2.setForeground(new java.awt.Color(255, 255, 255));
        lblSlot2.setText("Slot 2 - Empty");
        jPanel1.add(lblSlot2, new org.netbeans.lib.awtextra.AbsoluteConstraints(76, 400, 142, 50));

        lblSlot4.setFont(new java.awt.Font(".SF NS Text", 1, 13)); // NOI18N
        lblSlot4.setForeground(new java.awt.Color(255, 255, 255));
        lblSlot4.setText("Slot 4 - Empty");
        jPanel1.add(lblSlot4, new org.netbeans.lib.awtextra.AbsoluteConstraints(76, 533, 142, 50));

        lblSlot6.setFont(new java.awt.Font(".SF NS Text", 1, 13)); // NOI18N
        lblSlot6.setForeground(new java.awt.Color(255, 255, 255));
        lblSlot6.setText("Slot 6 - Empty");
        jPanel1.add(lblSlot6, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 340, 170, 50));

        lblSlot7.setFont(new java.awt.Font(".SF NS Text", 1, 13)); // NOI18N
        lblSlot7.setForeground(new java.awt.Color(255, 255, 255));
        lblSlot7.setText("Slot 7 - Empty");
        jPanel1.add(lblSlot7, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 400, 170, 50));

        lblSlot8.setFont(new java.awt.Font(".SF NS Text", 1, 13)); // NOI18N
        lblSlot8.setForeground(new java.awt.Color(255, 255, 255));
        lblSlot8.setText("Slot 8 - Empty");
        jPanel1.add(lblSlot8, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 468, 180, 50));

        lblSlot9.setFont(new java.awt.Font(".SF NS Text", 1, 13)); // NOI18N
        lblSlot9.setForeground(new java.awt.Color(255, 255, 255));
        lblSlot9.setText("Slot 9 - Empty");
        jPanel1.add(lblSlot9, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 530, 180, 50));

        jSeparator2.setForeground(new java.awt.Color(204, 204, 204));
        jPanel1.add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(192, 51, 384, 10));

        cbxItemCode.setBackground(new java.awt.Color(255, 255, 255));
        cbxItemCode.setFont(new java.awt.Font("Avenir Next", 1, 13)); // NOI18N
        cbxItemCode.setForeground(new java.awt.Color(0, 0, 0));
        cbxItemCode.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10" }));
        cbxItemCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxItemCodeActionPerformed(evt);
            }
        });
        jPanel1.add(cbxItemCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(408, 67, 127, -1));

        lblCode.setFont(new java.awt.Font(".SF NS Text", 1, 14)); // NOI18N
        lblCode.setForeground(new java.awt.Color(255, 204, 204));
        lblCode.setText("Slot Code : ");
        jPanel1.add(lblCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 69, -1, -1));

        lblItemNewQty.setFont(new java.awt.Font(".SF NS Text", 1, 14)); // NOI18N
        lblItemNewQty.setForeground(new java.awt.Color(255, 204, 204));
        lblItemNewQty.setText("Item Quantity :");
        jPanel1.add(lblItemNewQty, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 116, -1, -1));

        btnAddQty.setBackground(new java.awt.Color(204, 204, 204));
        btnAddQty.setFont(new java.awt.Font("Arial Black", 1, 13)); // NOI18N
        btnAddQty.setForeground(new java.awt.Color(51, 51, 51));
        btnAddQty.setText("Add Quantity");
        btnAddQty.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAddQty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddQtyActionPerformed(evt);
            }
        });
        jPanel1.add(btnAddQty, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 172, -1, 40));

        btnRemoveItem.setBackground(new java.awt.Color(204, 204, 204));
        btnRemoveItem.setFont(new java.awt.Font("Arial Black", 1, 13)); // NOI18N
        btnRemoveItem.setForeground(new java.awt.Color(51, 51, 51));
        btnRemoveItem.setText("Remove Item");
        btnRemoveItem.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnRemoveItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveItemActionPerformed(evt);
            }
        });
        jPanel1.add(btnRemoveItem, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 170, -1, 40));

        lblCode1.setFont(new java.awt.Font(".SF NS Text", 1, 13)); // NOI18N
        lblCode1.setForeground(new java.awt.Color(255, 153, 153));
        lblCode1.setText(" 01");
        lblCode1.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(204, 204, 204)));
        jPanel1.add(lblCode1, new org.netbeans.lib.awtextra.AbsoluteConstraints(42, 350, 28, 27));

        lblCode2.setFont(new java.awt.Font(".SF NS Text", 1, 13)); // NOI18N
        lblCode2.setForeground(new java.awt.Color(255, 153, 153));
        lblCode2.setText(" 02");
        lblCode2.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(204, 204, 204)));
        jPanel1.add(lblCode2, new org.netbeans.lib.awtextra.AbsoluteConstraints(42, 412, 28, 27));

        lblCode3.setFont(new java.awt.Font(".SF NS Text", 1, 13)); // NOI18N
        lblCode3.setForeground(new java.awt.Color(255, 153, 153));
        lblCode3.setText(" 03");
        lblCode3.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(204, 204, 204)));
        jPanel1.add(lblCode3, new org.netbeans.lib.awtextra.AbsoluteConstraints(42, 480, 28, 27));

        lblCode4.setFont(new java.awt.Font(".SF NS Text", 1, 13)); // NOI18N
        lblCode4.setForeground(new java.awt.Color(255, 153, 153));
        lblCode4.setText(" 04");
        lblCode4.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(204, 204, 204)));
        jPanel1.add(lblCode4, new org.netbeans.lib.awtextra.AbsoluteConstraints(42, 545, 28, 27));

        lblCode6.setFont(new java.awt.Font(".SF NS Text", 1, 13)); // NOI18N
        lblCode6.setForeground(new java.awt.Color(255, 153, 153));
        lblCode6.setText(" 06");
        lblCode6.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(204, 204, 204)));
        jPanel1.add(lblCode6, new org.netbeans.lib.awtextra.AbsoluteConstraints(394, 350, 28, 27));

        lblCode7.setFont(new java.awt.Font(".SF NS Text", 1, 13)); // NOI18N
        lblCode7.setForeground(new java.awt.Color(255, 153, 153));
        lblCode7.setText(" 07");
        lblCode7.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(204, 204, 204)));
        jPanel1.add(lblCode7, new org.netbeans.lib.awtextra.AbsoluteConstraints(394, 412, 28, 27));

        lblCode8.setFont(new java.awt.Font(".SF NS Text", 1, 13)); // NOI18N
        lblCode8.setForeground(new java.awt.Color(255, 153, 153));
        lblCode8.setText(" 08");
        lblCode8.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(204, 204, 204)));
        jPanel1.add(lblCode8, new org.netbeans.lib.awtextra.AbsoluteConstraints(396, 480, 28, 27));

        lblCode9.setFont(new java.awt.Font(".SF NS Text", 1, 13)); // NOI18N
        lblCode9.setForeground(new java.awt.Color(255, 153, 153));
        lblCode9.setText(" 09");
        lblCode9.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(204, 204, 204)));
        jPanel1.add(lblCode9, new org.netbeans.lib.awtextra.AbsoluteConstraints(396, 545, 28, 27));

        jLabel5.setBackground(new java.awt.Color(255, 255, 255));
        jLabel5.setFont(new java.awt.Font(".SF NS Text", 1, 13)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(204, 204, 204));
        jLabel5.setText("Stock Available");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(225, 302, -1, -1));

        jSeparator3.setForeground(new java.awt.Color(204, 204, 204));
        jPanel1.add(jSeparator3, new org.netbeans.lib.awtextra.AbsoluteConstraints(225, 322, 102, 10));

        jLabel6.setBackground(new java.awt.Color(255, 255, 255));
        jLabel6.setFont(new java.awt.Font(".SF NS Text", 1, 13)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(204, 204, 204));
        jLabel6.setText("Stock Available");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 300, -1, -1));

        jSeparator4.setForeground(new java.awt.Color(204, 204, 204));
        jPanel1.add(jSeparator4, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 320, 102, 10));

        lblCode5.setFont(new java.awt.Font(".SF NS Text", 1, 13)); // NOI18N
        lblCode5.setForeground(new java.awt.Color(255, 153, 153));
        lblCode5.setText(" 05");
        lblCode5.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(204, 204, 204)));
        jPanel1.add(lblCode5, new org.netbeans.lib.awtextra.AbsoluteConstraints(42, 613, 28, 27));

        lblSlot5.setFont(new java.awt.Font(".SF NS Text", 1, 13)); // NOI18N
        lblSlot5.setForeground(new java.awt.Color(255, 255, 255));
        lblSlot5.setText("Slot 5 - Empty");
        jPanel1.add(lblSlot5, new org.netbeans.lib.awtextra.AbsoluteConstraints(76, 601, 142, 50));

        lblCode10.setFont(new java.awt.Font(".SF NS Text", 1, 13)); // NOI18N
        lblCode10.setForeground(new java.awt.Color(255, 153, 153));
        lblCode10.setText(" 10");
        lblCode10.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(204, 204, 204)));
        jPanel1.add(lblCode10, new org.netbeans.lib.awtextra.AbsoluteConstraints(396, 613, 28, 27));

        lblSlot10.setFont(new java.awt.Font(".SF NS Text", 1, 13)); // NOI18N
        lblSlot10.setForeground(new java.awt.Color(255, 255, 255));
        lblSlot10.setText("Slot 10 - Empty");
        jPanel1.add(lblSlot10, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 601, 180, 50));

        txtQty1.setBackground(new java.awt.Color(204, 204, 204));
        txtQty1.setFont(new java.awt.Font(".SF NS Text", 1, 13)); // NOI18N
        txtQty1.setForeground(new java.awt.Color(51, 51, 51));
        jPanel1.add(txtQty1, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 350, 50, 30));

        txtQty2.setBackground(new java.awt.Color(204, 204, 204));
        txtQty2.setFont(new java.awt.Font(".SF NS Text", 1, 13)); // NOI18N
        txtQty2.setForeground(new java.awt.Color(51, 51, 51));
        jPanel1.add(txtQty2, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 410, 50, 30));

        txtQty3.setBackground(new java.awt.Color(204, 204, 204));
        txtQty3.setFont(new java.awt.Font(".SF NS Text", 1, 13)); // NOI18N
        txtQty3.setForeground(new java.awt.Color(51, 51, 51));
        txtQty3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtQty3ActionPerformed(evt);
            }
        });
        jPanel1.add(txtQty3, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 480, 50, 30));

        txtQty4.setBackground(new java.awt.Color(204, 204, 204));
        txtQty4.setFont(new java.awt.Font(".SF NS Text", 1, 13)); // NOI18N
        txtQty4.setForeground(new java.awt.Color(51, 51, 51));
        jPanel1.add(txtQty4, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 550, 50, 30));

        txtQty5.setBackground(new java.awt.Color(204, 204, 204));
        txtQty5.setFont(new java.awt.Font(".SF NS Text", 1, 13)); // NOI18N
        txtQty5.setForeground(new java.awt.Color(51, 51, 51));
        jPanel1.add(txtQty5, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 620, 50, 30));

        txtQty6.setBackground(new java.awt.Color(204, 204, 204));
        txtQty6.setFont(new java.awt.Font(".SF NS Text", 1, 13)); // NOI18N
        txtQty6.setForeground(new java.awt.Color(51, 51, 51));
        jPanel1.add(txtQty6, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 350, 50, 30));

        txtQty7.setBackground(new java.awt.Color(204, 204, 204));
        txtQty7.setFont(new java.awt.Font(".SF NS Text", 1, 13)); // NOI18N
        txtQty7.setForeground(new java.awt.Color(51, 51, 51));
        jPanel1.add(txtQty7, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 410, 50, 30));

        txtQty8.setBackground(new java.awt.Color(204, 204, 204));
        txtQty8.setFont(new java.awt.Font(".SF NS Text", 1, 13)); // NOI18N
        txtQty8.setForeground(new java.awt.Color(51, 51, 51));
        jPanel1.add(txtQty8, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 480, 50, 30));

        txtQty9.setBackground(new java.awt.Color(204, 204, 204));
        txtQty9.setFont(new java.awt.Font(".SF NS Text", 1, 13)); // NOI18N
        txtQty9.setForeground(new java.awt.Color(51, 51, 51));
        jPanel1.add(txtQty9, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 550, 50, 30));

        txtQty10.setBackground(new java.awt.Color(204, 204, 204));
        txtQty10.setFont(new java.awt.Font(".SF NS Text", 1, 13)); // NOI18N
        txtQty10.setForeground(new java.awt.Color(51, 51, 51));
        jPanel1.add(txtQty10, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 620, 50, 30));

        txtQtyRestock.setBackground(new java.awt.Color(255, 255, 255));
        txtQtyRestock.setFont(new java.awt.Font("Avenir Next", 1, 13)); // NOI18N
        txtQtyRestock.setForeground(new java.awt.Color(0, 0, 0));
        txtQtyRestock.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204), 2));
        txtQtyRestock.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtQtyRestockFocusLost(evt);
            }
        });
        txtQtyRestock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtQtyRestockActionPerformed(evt);
            }
        });
        txtQtyRestock.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtQtyRestockKeyReleased(evt);
            }
        });
        jPanel1.add(txtQtyRestock, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 100, 120, 37));

        mainPanel.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(669, 120, 708, 720));

        lblItemName.setBackground(new java.awt.Color(153, 0, 0));
        lblItemName.setFont(new java.awt.Font("Apple SD Gothic Neo", 1, 18)); // NOI18N
        lblItemName.setForeground(new java.awt.Color(153, 0, 0));
        lblItemName.setText("Item Name :");
        mainPanel.add(lblItemName, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 220, -1, -1));

        lblItemPrice.setBackground(new java.awt.Color(153, 0, 0));
        lblItemPrice.setFont(new java.awt.Font("Apple SD Gothic Neo", 1, 18)); // NOI18N
        lblItemPrice.setForeground(new java.awt.Color(153, 0, 0));
        lblItemPrice.setText("Item Price (per):");
        mainPanel.add(lblItemPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 320, -1, -1));

        lblItemImg.setBackground(new java.awt.Color(153, 0, 0));
        lblItemImg.setFont(new java.awt.Font("Apple SD Gothic Neo", 1, 18)); // NOI18N
        lblItemImg.setForeground(new java.awt.Color(153, 0, 0));
        lblItemImg.setText("Item Image :");
        mainPanel.add(lblItemImg, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 520, -1, -1));

        lblItemQty.setBackground(new java.awt.Color(153, 0, 0));
        lblItemQty.setFont(new java.awt.Font("Apple SD Gothic Neo", 1, 18)); // NOI18N
        lblItemQty.setForeground(new java.awt.Color(153, 0, 0));
        lblItemQty.setText("Item Quantity :");
        mainPanel.add(lblItemQty, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 410, -1, -1));

        btnUploadImg.setBackground(new java.awt.Color(102, 0, 0));
        btnUploadImg.setFont(new java.awt.Font("Geeza Pro", 1, 12)); // NOI18N
        btnUploadImg.setForeground(new java.awt.Color(255, 255, 255));
        btnUploadImg.setText("Choose Image");
        btnUploadImg.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnUploadImg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUploadImgActionPerformed(evt);
            }
        });
        mainPanel.add(btnUploadImg, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 520, 130, 38));

        txtItemName.setBackground(new java.awt.Color(255, 255, 255));
        txtItemName.setFont(new java.awt.Font("Avenir Next", 1, 15)); // NOI18N
        txtItemName.setForeground(new java.awt.Color(0, 0, 0));
        txtItemName.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51), 2));
        txtItemName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtItemNameFocusLost(evt);
            }
        });
        txtItemName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtItemNameActionPerformed(evt);
            }
        });
        txtItemName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtItemNameKeyReleased(evt);
            }
        });
        mainPanel.add(txtItemName, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 220, 262, 37));

        txtItemPrice.setBackground(new java.awt.Color(255, 255, 255));
        txtItemPrice.setFont(new java.awt.Font("Avenir Next", 1, 15)); // NOI18N
        txtItemPrice.setForeground(new java.awt.Color(0, 0, 0));
        txtItemPrice.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51), 2));
        txtItemPrice.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtItemPriceFocusLost(evt);
            }
        });
        txtItemPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtItemPriceActionPerformed(evt);
            }
        });
        txtItemPrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtItemPriceKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtItemPriceKeyReleased(evt);
            }
        });
        mainPanel.add(txtItemPrice, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 310, 262, 37));

        btnUpload.setBackground(new java.awt.Color(0, 0, 0));
        btnUpload.setFont(new java.awt.Font("DIN Alternate", 1, 16)); // NOI18N
        btnUpload.setForeground(new java.awt.Color(204, 204, 204));
        btnUpload.setText("Upload Item");
        btnUpload.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnUpload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUploadActionPerformed(evt);
            }
        });
        mainPanel.add(btnUpload, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 770, 127, 45));

        lblTemp.setForeground(new java.awt.Color(51, 51, 51));
        mainPanel.add(lblTemp, new org.netbeans.lib.awtextra.AbsoluteConstraints(31, 480, 460, 30));

        jLabel3.setBackground(new java.awt.Color(0, 0, 0));
        jLabel3.setFont(new java.awt.Font("Arial Hebrew", 1, 15)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setText("RM");
        mainPanel.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 320, 30, 30));

        jLabel7.setFont(new java.awt.Font("Arial Hebrew", 1, 24)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(51, 51, 51));
        jLabel7.setText("Add New Item");
        mainPanel.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 140, 279, -1));
        mainPanel.add(jSeparator5, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 170, 400, 10));

        jSeparator6.setBackground(new java.awt.Color(0, 0, 0));
        jSeparator6.setOrientation(javax.swing.SwingConstants.VERTICAL);
        mainPanel.add(jSeparator6, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 110, 14, 790));

        txtQtyItem.setBackground(new java.awt.Color(255, 255, 255));
        txtQtyItem.setFont(new java.awt.Font("Avenir Next", 1, 15)); // NOI18N
        txtQtyItem.setForeground(new java.awt.Color(0, 0, 0));
        txtQtyItem.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        txtQtyItem.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                txtQtyItemMouseMoved(evt);
            }
        });
        txtQtyItem.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtQtyItemFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtQtyItemFocusLost(evt);
            }
        });
        txtQtyItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtQtyItemMouseClicked(evt);
            }
        });
        txtQtyItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtQtyItemActionPerformed(evt);
            }
        });
        txtQtyItem.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtQtyItemKeyReleased(evt);
            }
        });
        mainPanel.add(txtQtyItem, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 410, 262, 37));

        btnClear.setBackground(new java.awt.Color(0, 0, 0));
        btnClear.setFont(new java.awt.Font("DIN Alternate", 1, 16)); // NOI18N
        btnClear.setForeground(new java.awt.Color(204, 204, 204));
        btnClear.setText("Clear");
        btnClear.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });
        mainPanel.add(btnClear, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 770, 130, 45));

        lblImageIcon.setBackground(new java.awt.Color(204, 204, 204));
        lblImageIcon.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(0, 0, 0)));
        mainPanel.add(lblImageIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 520, 250, 197));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 1441, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 905, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtItemNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtItemNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtItemNameActionPerformed

    private void txtItemPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtItemPriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtItemPriceActionPerformed

    private void btnMainMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMainMenuActionPerformed
        int selection = JOptionPane.showConfirmDialog(null, "Going back to main menu will cancel the ongoing item uploading process. Continue?", "Returning to Main Menu!", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (selection == JOptionPane.YES_OPTION) {
            this.dispose();
            new StaffMainMenu().setVisible(true);
        }
    }//GEN-LAST:event_btnMainMenuActionPerformed

    private void btnUploadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUploadActionPerformed
        try {
            InsertItem();

        } catch (IOException ex) {
            Logger.getLogger(VenAddStock.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnUploadActionPerformed

    private void txtQtyItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtQtyItemActionPerformed

    }//GEN-LAST:event_txtQtyItemActionPerformed

    private void txtQtyItemFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtQtyItemFocusLost

    }//GEN-LAST:event_txtQtyItemFocusLost

    private void txtItemNameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtItemNameFocusLost

    }//GEN-LAST:event_txtItemNameFocusLost

    private void txtItemPriceFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtItemPriceFocusLost
        ItemPriceValidation invalidate = new ItemPriceValidation();
        invalidate.runValidate(txtItemPrice, true);
    }//GEN-LAST:event_txtItemPriceFocusLost

    private void txtQtyRestockFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtQtyRestockFocusLost

    }//GEN-LAST:event_txtQtyRestockFocusLost

    private void txtQtyRestockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtQtyRestockActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtQtyRestockActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        clearAddNewStock();
    }//GEN-LAST:event_btnClearActionPerformed

    private void txtQty3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtQty3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtQty3ActionPerformed

    private void btnAddQtyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddQtyActionPerformed
        addQtyItemSlot();
    }//GEN-LAST:event_btnAddQtyActionPerformed

    private void cbxItemCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxItemCodeActionPerformed

    }//GEN-LAST:event_cbxItemCodeActionPerformed

    private void btnUploadImgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUploadImgActionPerformed
        getItemImg();
    }//GEN-LAST:event_btnUploadImgActionPerformed

    private void txtQtyItemFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtQtyItemFocusGained

    }//GEN-LAST:event_txtQtyItemFocusGained

    private void txtQtyItemMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtQtyItemMouseClicked

    }//GEN-LAST:event_txtQtyItemMouseClicked

    private void txtQtyItemMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtQtyItemMouseMoved

    }//GEN-LAST:event_txtQtyItemMouseMoved

    private void txtQtyItemKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtQtyItemKeyReleased
        ItemQuantityValidation invalidate = new ItemQuantityValidation();
        invalidate.runValidate(txtQtyItem, true);
    }//GEN-LAST:event_txtQtyItemKeyReleased

    private void txtItemPriceKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtItemPriceKeyReleased

    }//GEN-LAST:event_txtItemPriceKeyReleased

    private void txtItemNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtItemNameKeyReleased
        ItemNameValidation invalidate = new ItemNameValidation();
        invalidate.runValidate(txtItemName, true);
    }//GEN-LAST:event_txtItemNameKeyReleased

    private void txtItemPriceKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtItemPriceKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtItemPriceKeyPressed

    private void btnRemoveItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveItemActionPerformed
        deleteQtyItemSlot();
    }//GEN-LAST:event_btnRemoveItemActionPerformed

    private void txtQtyRestockKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtQtyRestockKeyReleased
         ItemQuantityValidation invalidate = new ItemQuantityValidation();
         invalidate.runValidate(txtQtyRestock, true);
    }//GEN-LAST:event_txtQtyRestockKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VenAddStock.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VenAddStock.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VenAddStock.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VenAddStock.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //This sets the frame customization
                  VenAddStock frame = new VenAddStock();
                  frame.setVisible(true);
                  frame.setResizable(false);
            }
        });
    }

    //This method is to delete a temporary staff session that has been created during verification
    private void clearStaffSession() {
        try {
            // This sets the directory of the project
            projectDir = System.getProperty("user.dir") + "//db_txtFiles//";
            File staffCache = new File(projectDir + "StaffCache.txt");
            if (staffCache.exists()) {
                staffCache.delete();
            }
        } catch (Exception ex) {

        }
    }
    

    // This is exception class for empty fields 
    private void emptyInputFields() throws Exception {
        if ("".equals(txtItemName.getText())) {
            throw new Exception("Empty item name");
        }
        if ("".equals(txtItemPrice.getText())) {
            throw new Exception("Empty item price");
        }
        if ("".equals(txtQtyItem.getText())) {
            throw new Exception("Empty item quantity");
        }
        if (lblImageIcon.getIcon() == null) {
            throw new Exception("Empty item image");
        }
        if ("".equals(txtQtyItem.getText())) {
            throw new Exception("Empty quantity item");
        }
    }

    
    //This method raise message for all empty fields
    private void validateInput() {
        if ("".equals(txtItemName.getText()) && "".equals(txtItemPrice.getText()) && "".equals(txtQtyItem.getText()) && lblImageIcon.getIcon() == null) {
            JOptionPane.showMessageDialog(null, "Invalid input! Please input every fields to proceed.", "Invalid insertion detected!", JOptionPane.WARNING_MESSAGE);
        } else if ("".equals(txtItemName.getText())) {
            JOptionPane.showMessageDialog(null, "Invalid input! Please input item name to proceed.", "Invalid insertion detected!", JOptionPane.WARNING_MESSAGE);
        } else if ("".equals(String.valueOf(txtItemPrice.getText()))) {
            JOptionPane.showMessageDialog(null, "Invalid input! Please input item price to proceed.", "Invalid insertion detected!", JOptionPane.WARNING_MESSAGE);
        } else if ("".equals(String.valueOf(txtQtyItem.getText()))) {
            JOptionPane.showMessageDialog(null, "Invalid input! Please input item quantity to proceed.", "Invalid insertion detected!", JOptionPane.WARNING_MESSAGE);
        } else if (lblImageIcon.getIcon() == null) {
            JOptionPane.showMessageDialog(null, "Invalid input! Pleass select an image to proceed.", "Invalid insertion detected!", JOptionPane.WARNING_MESSAGE);
        }
    }

    //This will clear the textfields for adding new item
    private void clearAddNewStock() {
        txtItemName.setText("");
        txtItemPrice.setText("");
        txtQtyItem.setText("");
        lblImageIcon.setIcon(null);
        lblTemp.setText("");
    }

    //This method is to get and set the image for the item
    private void getItemImg() {
        projectDir = System.getProperty("user.dir");
        //File stockImgFile = new File(projectDir + "//ItemImg//");
        try {
            JFileChooser cFile = new JFileChooser();
            FileNameExtensionFilter fileFilter = new FileNameExtensionFilter("4 Extensions Supported", "Jpg", "png", "jpeg", "gif");
            cFile.setFileFilter(fileFilter);
            int selectedImg = cFile.showOpenDialog(null);
            //This will opens the window to choose item image to upload
            if (selectedImg == JFileChooser.APPROVE_OPTION) {
                //this stores image as a file object
                File file = cFile.getSelectedFile();
                //This assigns variable that containing the project directory
                String getselectedImage = file.getAbsolutePath();
                //This creates image icon object
                ImageIcon imgIcon = new ImageIcon(getselectedImage);
                //This creates the image object from the image icon object
                Image imgSet = imgIcon.getImage();
                //This dis[lays the icon image on the label
                lblImageIcon.setIcon(new ImageIcon(imgSet));
                oldFileLocation = getselectedImage;             
               //lblTemp.setText(getselectedImage);

                //This sets the directory of selected image which will be used during the insert method            
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error! Image could not be able to retrieved.", "Error Occured", JOptionPane.ERROR_MESSAGE);
        }
    }

    //This will sort the order of the items details in the text file
    private void sortItemDetails() {
        projectDir = System.getProperty("user.dir") + "//db_txtFiles//StockItem.txt";
        try {
            Path fileloca = Paths.get(projectDir);
            Charset charset = Charset.forName("UTF-8");

            List<String> itemLines = Files.readAllLines(fileloca, charset);
            Collections.sort(itemLines, new ItemSorter());

            Path toPath = Paths.get(projectDir);
            Files.write(toPath, itemLines, charset);

        } catch (Exception e) {

        }

    }

    //This method will delete the line which has the asterik symbol in order to insert the new item inside the text file
    public void deleteItemDetails(String fileLoca, String removeValue, int positionValue, String seperator) throws IOException {
        //This will sssign the integer value to pick the line that will be deleted
        int position = positionValue - 1;
        //This sets the location for temporary file
        projectDir = System.getProperty("user.dir") + "//db_txtfiles//tempoItem.txt";
        File exisFile = new File(fileLoca);
        File latestFile = new File(projectDir);
        String readItem;
        //This create temporary array based on the text file
        String item[];
        try {
            //This is to set the readers and writers
            FileReader fr = new FileReader(fileLoca);
            BufferedReader br = new BufferedReader(fr);
            FileWriter fw = new FileWriter(projectDir, true);
            PrintWriter pw = new PrintWriter(fw);
            while ((readItem = br.readLine()) != null) {
                item = readItem.split(":");
                //This will find which line that has the asterik symbol and remove it.
                if (!(item[position].equalsIgnoreCase(removeValue))) {
                    pw.println(readItem);
                }

            }
            pw.flush();
            pw.close();
            fw.close();
            br.close();
            fr.close();
            //This will delete the existing file
            exisFile.delete();
            File fileDump = new File(fileLoca);
            //This renames the latest file as the existing file name
            latestFile.renameTo(fileDump);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Interruption occured while deleting!", "Error", JOptionPane.ERROR_MESSAGE);
        }

    }

    //This method will add items in the vending machine slots
    private void InsertItem() throws IOException {
        projectDir = System.getProperty("user.dir") + "//db_txtfiles//StockItem.txt";
        File stockFile = new File(projectDir);
        FileReader fr = new FileReader(stockFile);
        BufferedReader br = new BufferedReader(fr);
        String itemRecord;
          
        
        while ((itemRecord = br.readLine()) != null) {
            //This is to split each line using colon to read and get the details in an array
            String[] itemDetails = itemRecord.split(":");
            String idItem = itemDetails[0];
            String nameItem = itemDetails[1];
            String maxItem = itemDetails[0];
            try {
                emptyInputFields();
                //This will check whether the vending has empty slot to place the item or not

                if ((maxItem.equals("10")) && (!"*".equals(nameItem))) {
                    JOptionPane.showMessageDialog(null, "The vending machine has reached its maximum item slot capacity! Please remove an item and try again to upload the new item.", "Slots are full", JOptionPane.ERROR_MESSAGE);

                } else if ("*".equals(nameItem)) {
               
                   //This will get the selected image extensions
                    String imgextensionName = FilenameUtils.getExtension(oldFileLocation);
                              
                    //This will removes the line of empty slot.  
                    deleteItemDetails(projectDir, idItem, 1, ":");
                    
                    //Getting textfield values into variables
                    String itemName = txtItemName.getText();
                    String itemPrice = txtItemPrice.getText();
                    String itemQty = txtQtyItem.getText();
                    FileWriter fw = new FileWriter(stockFile, true);
                    BufferedWriter bw = new BufferedWriter(fw);
                    String itemData = idItem + ":" + itemName + ":" + itemPrice + ":" + itemQty + ":" + "ITM" + idItem + "." + imgextensionName + "\n";
                    bw.write(itemData);
                    bw.close();
                    br.close();
                    fr.close();

                    //This will sort the lines in the text file
                    sortItemDetails();
                    
                    //This assigns the file location of the image
                    //String exisFileLoca = lblTemp.getText();
                    
                    
                    //This will add the img inside the created folder
                    insertItemImage(idItem, oldFileLocation);
                    JOptionPane.showMessageDialog(null, itemName + " has been uploaded successfully!", "Item successfully added!", JOptionPane.INFORMATION_MESSAGE);
                    clearAddNewStock();
                    getItemSlot();
                }

            } catch (IOException ex) {
                Logger.getLogger(StaffRegister.class.getName()).log(Level.SEVERE, null, ex);

            } catch (Exception ex) {
                Logger.getLogger(VenAddStock.class.getName()).log(Level.SEVERE, null, ex);

            }
        }
        validateInput();
    }

    //This method will insert and rename the selected image in the item image folder
    private void insertItemImage(String insertedItemID, String imgSelected) {
        File file = new File(imgSelected);
        projectDir = System.getProperty("user.dir");
        String imgFolder = projectDir + "//ItemImg//";
        //This will get the selected image
        String extensionName = FilenameUtils.getExtension(imgSelected);
        //This sets the image name and its extension
        String itemImage = imgFolder + "ITM" + insertedItemID + "." + extensionName; // Assigning New Directory and New Image Filename.
        File latestFile = new File(itemImage);  // Create File Objects of the Image File That Will Be Transfered To The Source Folder.
        File exisFileName = new File(imgFolder);
        try {
            //This will check and delete if the image selected is already added in the folder
            if (latestFile.exists()) {
                Path imagesPath = Paths.get(itemImage);
                Files.delete(imagesPath);
            }
            //This will copy and paste the image from the source folder to the image folder
            Files.copy(file.toPath(), latestFile.toPath(), StandardCopyOption.REPLACE_EXISTING);
            boolean success = exisFileName.renameTo(latestFile);
            if(!success){
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    
    //This method will disable the text edit for the textfields
    private void disableTxtEdit() {
        txtQty1.setEditable(false);
        txtQty2.setEditable(false);
        txtQty3.setEditable(false);
        txtQty4.setEditable(false);
        txtQty5.setEditable(false);
        txtQty6.setEditable(false);
        txtQty7.setEditable(false);
        txtQty8.setEditable(false);
        txtQty9.setEditable(false);
        txtQty10.setEditable(false);
    }

    //This method will get the item details 
    private void getItemSlot() {
        String[] itemDetails;   // This array is to store all lines
        try {
            projectDir = System.getProperty("user.dir");
            File stockFile = new File(projectDir + "//db_txtfiles//StockItem.txt");
            if (!stockFile.exists()) {
                stockFile.createNewFile();
            }

            Scanner searchSlot = new Scanner(stockFile);
            // Read till last line of file
            while (searchSlot.hasNext()) {
                // Read the next line.
                String inputSlot = searchSlot.nextLine();
                // Split the details by using the colon and store in an array.
                itemDetails = inputSlot.split(":");
                
                if ("01".equals(itemDetails[0]) && !"*".equals(itemDetails[1])) {
                    lblSlot1.setText(itemDetails[1]);
                    txtQty1.setText(itemDetails[3]);

                } else if ("02".equals(itemDetails[0]) && !"*".equals(itemDetails[1])) {
                    lblSlot2.setText(itemDetails[1]);
                    txtQty2.setText(itemDetails[3]);
                } else if ("03".equals(itemDetails[0]) && !"*".equals(itemDetails[1])) {
                    lblSlot3.setText(itemDetails[1]);
                    txtQty3.setText(itemDetails[3]);
                } else if ("04".equals(itemDetails[0]) && !"*".equals(itemDetails[1])) {
                    lblSlot4.setText(itemDetails[1]);
                    txtQty4.setText(itemDetails[3]);
                } else if ("05".equals(itemDetails[0]) && !"*".equals(itemDetails[1])) {
                    lblSlot5.setText(itemDetails[1]);
                    txtQty5.setText(itemDetails[3]);
                } else if ("06".equals(itemDetails[0]) && !"*".equals(itemDetails[1])) {
                    lblSlot6.setText(itemDetails[1]);
                    txtQty6.setText(itemDetails[3]);
                } else if ("07".equals(itemDetails[0]) && !"*".equals(itemDetails[1])) {
                    lblSlot7.setText(itemDetails[1]);
                    txtQty7.setText(itemDetails[3]);
                } else if ("08".equals(itemDetails[0]) && !"*".equals(itemDetails[1])) {
                    lblSlot8.setText(itemDetails[1]);
                    txtQty8.setText(itemDetails[3]);
                } else if ("09".equals(itemDetails[0]) && !"*".equals(itemDetails[1])) {
                    lblSlot9.setText(itemDetails[1]);
                    txtQty9.setText(itemDetails[3]);
                } else if ("10".equals(itemDetails[0]) && !"*".equals(itemDetails[1])) {
                    lblSlot10.setText(itemDetails[1]);
                    txtQty10.setText(itemDetails[3]);
                }

            }
            searchSlot.close();
        } catch (Exception ex) {

        }

    }
    
    
    //This resets the item slot when the item is empty
    private void resetSlot(String Code) {
        switch (Code) {
            case "01":
                
                lblSlot1.setText("Slot 1 - Empty");
                txtQty1.setText("");
                break;
                
            case "02":

                lblSlot2.setText("Slot 2 - Empty");
                txtQty2.setText("");
                break;
                
            case "03":

                lblSlot3.setText("Slot 3 - Empty");
                txtQty3.setText("");
                break;
                 
            case "04":

                lblSlot4.setText("Slot 4 - Empty");
                txtQty4.setText("");
                break;
                
            case "05":
                lblSlot5.setText("Slot 5 - Empty");
                txtQty5.setText("");
                break;
                
            case "06":
                
                lblSlot6.setText("Slot 6 - Empty");
                txtQty6.setText("");
                break;
                
            case "07":
                
                lblSlot7.setText("Slot 7 - Empty");
                txtQty7.setText("");
                break;
                
            case "08":

                lblSlot8.setText("Slot 8 - Empty");
                txtQty8.setText("");
                break;
                
            case "09":
                lblSlot9.setText("Slot 9 - Empty");
                txtQty9.setText("");
                break;
                
            case "10":
                
                lblSlot10.setText("Slot 10 - Empty");
                txtQty10.setText("");
                break;
                

        }

    }



    //This method will add quantity for the item
    private void addQtyItemSlot() {
        if (cbxItemCode.getSelectedIndex() <= 0) { // This is will be displayed when the combo box is selected default
            JOptionPane.showMessageDialog(null, "Item Code is not selected!", "Item Code unselected!", JOptionPane.WARNING_MESSAGE);

        } else if ("".equals(txtQtyRestock.getText())) {
            JOptionPane.showMessageDialog(null, "Insert item quantity to proceed!", "Invalid quantity input!", JOptionPane.WARNING_MESSAGE);
        }
        projectDir = System.getProperty("user.dir");
        File stockFile = new File(projectDir + "//db_txtfiles//StockItem.txt");

        //This variable is for the new item quantity
        int newQty;
        //This gets the input from the text fields
        String code = cbxItemCode.getSelectedItem().toString();
        int Qty = Integer.parseInt(txtQtyRestock.getText());

        ArrayList<String> itemArray = new ArrayList<>();  //This is for temporary array to hold the staff data
        try {

            try ( FileReader fr = new FileReader(stockFile)) {
                Scanner readFile = new Scanner(fr);
                String detailLine;
                String[] detailArr;  //This temp array is to store the details which is gonna be updated                                     
                while ((detailLine = readFile.nextLine()) != null) {
                    //This is to split each line using colon to check if the item code is present
                    detailArr = detailLine.split(":");
                    //If the code is present, add the old data
                    //Add the new data in the temporary array
                    if (detailArr[0].equals(code)) {
                        ///This adds the new quanty with existing item quantity
                        newQty = Integer.parseInt(detailArr[3]) + Qty;

                        //This is to check whether the total item quantity is not more than 25
                        if (Qty <= 0) {
                            itemArray.add(detailArr[0] + ":"
                                    + detailArr[1] + ":"
                                    + detailArr[2] + ":"
                                    + detailArr[3] + ":"
                                    + detailArr[4]);
                            JOptionPane.showMessageDialog(null, "Inserted item quantity should be atleast 1!", "Item quantity insertion invalid!", JOptionPane.ERROR_MESSAGE);
                        } else if (newQty <= 25) { //if the total item quantity is not more than 25, it will include the new quantity inside the array
                            itemArray.add(detailArr[0] + ":"
                                    + detailArr[1] + ":"
                                    + detailArr[2] + ":"
                                    + newQty + ":"
                                    + detailArr[4]);
                            JOptionPane.showMessageDialog(null, "New item quantity has been added successfully!", "Quantity successfully added!", JOptionPane.INFORMATION_MESSAGE);
                        } else if (newQty > 25) { //if the total item quantity more than 25, it will rewrite all the item details again without any changes in the array
                            itemArray.add(detailArr[0] + ":"
                                    + detailArr[1] + ":"
                                    + detailArr[2] + ":"
                                    + detailArr[3] + ":"
                                    + detailArr[4]);
                            JOptionPane.showMessageDialog(null, "Item quantity should not exceed 25!", "Item quantity invalid!", JOptionPane.ERROR_MESSAGE);
                        }

                    } else {
                        //search other item code doesnt match and add the line
                        itemArray.add(detailLine);
                    }

                }
                fr.close();
            } catch (Exception e) {

            }
        } catch (Exception e) {

        }

        try {
            //this is to set the bufferd write to write the data into temporary array again back to text file        
            try ( PrintWriter pw = new PrintWriter(stockFile)) {
                for (String str : itemArray) {
                    pw.println(str); //this will write all the data in the temporary array back to the file line by line
                }
                pw.close();
                getItemSlot();
                cbxItemCode.setSelectedIndex(0);
                txtQtyRestock.setText("");
            } catch (IOException ex) {
                Logger.getLogger(ManageStaffDetails.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, "Item quantity has not been updated successfully!", "Error Occured!", JOptionPane.ERROR_MESSAGE);
            }

        } catch (Exception e) {

        }

    }

    
    
    
    //This method removes the item from the vending machine
    private void deleteQtyItemSlot() {
        
        if (cbxItemCode.getSelectedIndex() <= 0) { // This is will be displayed when the combo box is selected default
            JOptionPane.showMessageDialog(null, "Item Code is not selected!", "Item Code unselected!", JOptionPane.WARNING_MESSAGE);

        } else if ("".equals(txtQtyRestock.getText())) {
            JOptionPane.showMessageDialog(null, "Insert item quantity to proceed!", "Invalid quantity input!", JOptionPane.WARNING_MESSAGE);
        }
        projectDir = System.getProperty("user.dir");
        File stockFile = new File(projectDir + "//db_txtfiles//StockItem.txt");

        //This variable is for the new item quantity
        int newQty;
        //This gets the input from the text fields
        String code = cbxItemCode.getSelectedItem().toString();
        int Qty = Integer.parseInt(txtQtyRestock.getText());

        ArrayList<String> itemArray = new ArrayList<>();  //This is for temporary array to hold the staff data
        try {

            try ( FileReader fr = new FileReader(stockFile)) {
                Scanner readFile = new Scanner(fr);
                String detailLine;
                String[] detailArr;  //This temp array is to store the details which is gonna be updated                                     
                while ((detailLine = readFile.nextLine()) != null) {
                    //This is to split each line using colon to check if the item code is present
                    detailArr = detailLine.split(":");
                    //If the code is present, add the old data
                    //Add the new data in the temporary array  

                    if (detailArr[0].equals(code)) {
                        ///This adds the new quanty with existing item quantity

                        //This will check whether the slot is empty
                        if (detailArr[1].equals("*")) {
                            itemArray.add(detailArr[0] + ":"
                                    + "*" + ":"
                                    + "*" + ":"
                                    + "*" + ":"
                                    + "*");
                            JOptionPane.showMessageDialog(null, "Item slot is already empty!", "Empty Slot!", JOptionPane.WARNING_MESSAGE);
                        } else{

                        newQty = Integer.parseInt(detailArr[3]) - Qty;
                        //This is to check whether the total item quantity and new quantity valid or not
                        if (Qty <= 0 || newQty < 0) {
                            itemArray.add(detailArr[0] + ":"
                                    + detailArr[1] + ":"
                                    + detailArr[2] + ":"
                                    + detailArr[3] + ":"
                                    + detailArr[4]);
                            JOptionPane.showMessageDialog(null, "Enter a valid quantity to remove!", "Item quantity insertion invalid!", JOptionPane.ERROR_MESSAGE);
                        } else if (newQty > 0 && newQty <= 25) { //if the new quantity between 0 to 26, then add the new quantity
                            itemArray.add(detailArr[0] + ":"
                                    + detailArr[1] + ":"
                                    + detailArr[2] + ":"
                                    + newQty + ":"
                                    + detailArr[4]);
                            JOptionPane.showMessageDialog(null, "Item quantity has been removed successfully!", "Item successfully removed!", JOptionPane.INFORMATION_MESSAGE);
                        } else if (newQty == 0) { //if the new quantity is equal to 0, then delete the entire product
                            //This sets the project directory of the image folder
                            String imageDir = System.getProperty("user.dir");
                            String imgFolder = imageDir + "//ItemImg//";
                            //This gets the item image path of the item code stored in the array
                            Path itemImgPath = Paths.get(imgFolder + detailArr[4]);
                            //This will delete the image according to the item code
                            try {
                                Files.delete(itemImgPath);
                            } catch (IOException e) {

                                e.printStackTrace();
                            }
                            //This will set the item slot as "*" which indicates that the slot is empty
                            itemArray.add(detailArr[0] + ":"
                                    + "*" + ":"
                                    + "*" + ":"
                                    + "*" + ":"
                                    + "*");
                            JOptionPane.showMessageDialog(null, "Item has been removed successfully!", "Item successfully removed!", JOptionPane.INFORMATION_MESSAGE);
                            //resetSlot(detailArr[0]);
                           resetSlot(detailArr[0]);
                        }
                      }
                    } else {
                        //search other item code doesnt match and add the line
                        itemArray.add(detailLine);
                    }

                }

                fr.close();
                
            } catch (Exception e) {

            }
        } catch (Exception e) {

        }

        try {
            //This is to set the bufferd write to write the data into temporary array again back to text file        
            try ( PrintWriter pw = new PrintWriter(stockFile)) {
                for (String str : itemArray) {
                    pw.println(str); //This will write all the data in the temporary array back to the file line by line
                }
                pw.close();
                getItemSlot();
                cbxItemCode.setSelectedIndex(0);
                txtQtyRestock.setText("");
            } catch (IOException ex) {
                Logger.getLogger(ManageStaffDetails.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, "Item quantity has not been removed!", "Error Occured!", JOptionPane.ERROR_MESSAGE);
            }

        } catch (Exception e) {

        }

    }
  
    //This method is for initial start of the frame
    public void initGUI() {
        //This will padding for the textfields
        txtItemName.setBorder(BorderFactory.createCompoundBorder(txtItemName.getBorder(), BorderFactory.createEmptyBorder(5, 5, 5, 4)));
        txtItemPrice.setBorder(BorderFactory.createCompoundBorder(txtItemPrice.getBorder(), BorderFactory.createEmptyBorder(5, 5, 5, 4)));
        txtQtyItem.setBorder(BorderFactory.createCompoundBorder(txtQtyItem.getBorder(), BorderFactory.createEmptyBorder(5, 5, 5, 4)));
        txtQtyRestock.setBorder(BorderFactory.createCompoundBorder(txtQtyRestock.getBorder(), BorderFactory.createEmptyBorder(5, 5, 5, 4)));
        
        //This will the items to be unfocused
        btnMainMenu.setFocusable(false);
        btnUpload.setFocusable(false);
        btnUploadImg.setFocusable(false);
        btnAddQty.setFocusable(false);
        btnRemoveItem.setFocusable(false);

        //This will hide the label
        lblTemp.setVisible(false);

        //This will disable the staff text input for the textfields
        disableTxtEdit();
        

        //This will get all the available items inside the vending machine
        getItemSlot();

        //lblnote.setText("<HTML>Please Note:<br>Search the staff's username first in order to register the staff</HTML>");
        
        // This class handles window closing event
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                int selection = JOptionPane.showConfirmDialog(null, "Want to exit?", "Closing Adding Stock", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (selection == JOptionPane.YES_OPTION) {
                     new MainVMFram().setVisible(true);  
                   //This will clear the login session
                    clearStaffSession();
                    setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
                    dispose();
                } else {
                    setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
                }
            }
        });

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddQty;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnMainMenu;
    private javax.swing.JButton btnRemoveItem;
    private javax.swing.JButton btnUpload;
    private javax.swing.JButton btnUploadImg;
    private javax.swing.JComboBox<String> cbxItemCode;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JLabel lblCode;
    private javax.swing.JLabel lblCode1;
    private javax.swing.JLabel lblCode10;
    private javax.swing.JLabel lblCode2;
    private javax.swing.JLabel lblCode3;
    private javax.swing.JLabel lblCode4;
    private javax.swing.JLabel lblCode5;
    private javax.swing.JLabel lblCode6;
    private javax.swing.JLabel lblCode7;
    private javax.swing.JLabel lblCode8;
    private javax.swing.JLabel lblCode9;
    private javax.swing.JLabel lblImageIcon;
    private javax.swing.JLabel lblItemImg;
    private javax.swing.JLabel lblItemName;
    private javax.swing.JLabel lblItemNewQty;
    private javax.swing.JLabel lblItemPrice;
    private javax.swing.JLabel lblItemQty;
    private javax.swing.JLabel lblSlot1;
    private javax.swing.JLabel lblSlot10;
    private javax.swing.JLabel lblSlot2;
    private javax.swing.JLabel lblSlot3;
    private javax.swing.JLabel lblSlot4;
    private javax.swing.JLabel lblSlot5;
    private javax.swing.JLabel lblSlot6;
    private javax.swing.JLabel lblSlot7;
    private javax.swing.JLabel lblSlot8;
    private javax.swing.JLabel lblSlot9;
    private javax.swing.JLabel lblTemp;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JTextField txtItemName;
    private javax.swing.JTextField txtItemPrice;
    private javax.swing.JTextField txtQty1;
    private javax.swing.JTextField txtQty10;
    private javax.swing.JTextField txtQty2;
    private javax.swing.JTextField txtQty3;
    private javax.swing.JTextField txtQty4;
    private javax.swing.JTextField txtQty5;
    private javax.swing.JTextField txtQty6;
    private javax.swing.JTextField txtQty7;
    private javax.swing.JTextField txtQty8;
    private javax.swing.JTextField txtQty9;
    private javax.swing.JTextField txtQtyItem;
    private javax.swing.JTextField txtQtyRestock;
    // End of variables declaration//GEN-END:variables
}
